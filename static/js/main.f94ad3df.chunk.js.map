{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","Components/Sidebar/Sidebar.tsx","queries/course-queries.tsx","Components/CreateCourseDialog/CreateCourseDialog.tsx","__generated__/types.ts","Components/Dashboard/CourseCard.tsx","Components/Dashboard/Dashboard.tsx","Components/TableComponent/TableComponent.tsx","Components/StudentOverview/LTStudentViewTable.tsx","Components/StudentOverview/LTTargetViewTable.tsx","Components/StudentOverview/LearningTargetTab.tsx","Components/StudentOverview/MissionStudentViewTable.tsx","Components/StudentOverview/MissionsTab.tsx","Components/StudentOverview/StudentOverview.tsx","hooks/useQuizBlockSubmissions.ts","Components/TaskSubmissionOverview/QuizBlockPie.tsx","Components/TaskSubmissionOverview/TaskSubmissionOverview.tsx","Components/ViewTaskSubmission/ObjectiveSection.tsx","Components/ViewTaskSubmission/SubmissionDetail.tsx","hooks/useQuizBlockSubmission.ts","Components/ViewTaskSubmission/ViewTaskSubmission.tsx","assets/images/images-1.png","Components/LinearProgressWithLabel/LinearProgressWithLabel.tsx","Components/LinearProgressWithLabel/ObjectiveDropDown.tsx","Components/LinearProgressWithLabel/MissionDropDown.tsx","queries/user-queries.tsx","Components/SingleStudentOverview/SingleStudentOverview.tsx","Components/LinearProgressWithLabel/TargetDropDown.tsx","Components/SingleStudentMasteryOverview/SingleStudentMasteryOverview.tsx","Screens/TaskView/TaskNavbar/TaskNavbar.tsx","Screens/TaskView/TaskProgress/TaskProgress.tsx","Components/TaskBlocks/ImageBlock/ImageBlock.tsx","Components/TaskBlocks/TextBlock/TextBlock.tsx","Components/TaskBlocks/VideoBlock/VideoBlock.tsx","Components/TaskBlocks/QuizBlock/QuizBlock.tsx","Components/TaskBlocks/IntroBlock/IntroBlock.tsx","Screens/TaskView/BlockPageHandler/BlockPageHandler.tsx","Screens/TaskView/TaskView.tsx","Components/Content/Content.tsx","Navigation/Navigation.tsx","App/App.tsx","reportWebVitals.ts","environment.ts","clients/mock.ts","clients/cache.ts","clients/apollo-client.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","IconMenu","text","icon","link","to","className","size","menus","faChalkboardTeacher","faUserFriends","faTasks","faChartLine","faMedal","faComments","Sidebar","menu","SAVE_COURSE","gql","LargeTextField","styled","TextField","withAuthenticator","CacheControlScope","Role","useState","open","setOpen","useMutation","addCourse","handleClose","Button","variant","color","onClick","data-testid","Dialog","fullWidth","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","initialValues","courseTitle","courseDescription","instructor","onSubmit","values","setSubmitting","setTimeout","variables","course","name","description","missions","catch","error","console","log","handleChange","handleBlur","handleSubmit","isSubmitting","label","type","margin","value","onChange","onBlur","DialogActions","disabled","defaultOptions","ObjectiveFieldsFragmentDoc","ProgressFieldsFragmentDoc","UserProgressFieldsFragmentDoc","CourseInfoFieldsFragmentDoc","TaskFieldsFragmentDoc","ProgressObjectiveFieldsFragmentDoc","TargetFieldsFragmentDoc","MissionContentFieldsFragmentDoc","MissionFieldsFragmentDoc","McQuestionFieldsFragmentDoc","FrQuestionFieldsFragmentDoc","AnswerFieldsFragmentDoc","QuestionAndAnswerFieldsFragmentDoc","TextBlockFieldsFragmentDoc","VideoBlockFieldsFragmentDoc","QuizBlockFieldsFragmentDoc","ImageBlockFieldsFragmentDoc","PageFieldsFragmentDoc","ObjectivesDocument","ProgressOverviewDocument","GetCoursesDocument","QuizBlockDocument","useQuizBlockQuery","baseOptions","options","Apollo","GetTaskByIdDocument","CourseCard","courseInfo","Dashboard","useGetCoursesQuery","loading","data","message","courseInfos","courseId","TableComponent","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","style","users","firstName","lastName","userProgressMap","Map","LTStudentViewTable","useProgressOverviewQuery","set","curStatus","statusColor","time","user","push","section","userId","get","recent","status","backgroundColor","average","progress","useMemo","Header","accessor","Cell","LTTargetViewTable","target","objectives","LearningTargetTab","setValue","TabContext","TabList","event","newValue","centered","Tab","TabPanel","StyledTableCell","withStyles","theme","createStyles","head","palette","common","black","borderBottom","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","display","flexWrap","spacing","width","height","table","minWidth","borderedHeaderCell","borderTop","borderRight","borderedCell","borderLeft","tableRow","tabContainer","flexGrow","background","paper","MissionStudentViewTable","classes","history","useHistory","TableContainer","marginLeft","component","Paper","Table","aria-label","TableHead","align","TableBody","cursor","pathname","state","scope","MissionsTab","selectedTab","fontWeight","defaultTab","StudentOverview","useParams","LIST_QUIZBLOCK_SUBMISSIONS","useQuizBlockSubmissions","useQuery","quizblockSubmissions","QuizBlockPie","colorScale","x","y","white","TaskSubmissionOverview","quizblockQuery","taskId","blockId","quizblock","submission","student","points","title","ObjectiveSection","objectivesQuery","useObjectivesQuery","objective","objectiveId","renderQuestionOptions","question","studentAnswer","correctChoices","Set","answers","option","studentChoices","choices","styleName","has","FormControlLabel","control","Radio","checked","renderQuestions","questions","answerMap","studentAnswers","forEach","answer","questionId","defaultAnswer","result","index","__typename","feedback","RadioGroup","SubmissionDetail","quizblockSubmission","requiredScore","GET_QUIZBLOCK_SUBMISSION","useQuizBlockSubmission","ViewTaskSubmission","quizBlockQuery","BorderLinearProgress","borderRadius","colorPrimary","bar","LinearProgress","LinearProgressWithLabel","props","Box","alignItems","mr","ml","Typography","Math","round","nested","paddingLeft","progressBar","PaddedDiv","div","DoublePaddedDiv","TargetDropDown","tasks","List","ListItem","button","border","borderColor","borderStyle","ListItemText","primary","Collapse","in","timeout","unmountOnExit","task","flexDirection","MissionDropDown","subMissions","subMission","GET_USERS","StudentDiv","StudentNameDiv","StudentImageDiv","FieldTitleDiv","RowDiv","ColumnDiv","SingleStudentOverview","test","location","inputUser","instructions","parentMissionId","parentMissionIndex","pages","requirements","marginRight","src","StudentPicture","alt","mission","goal","compMission","compGoal","learningObjectives","objectiveName","SingleStudentMasteryOveriew","compLearningObjectives","compTarget","TaskNavbar","Navbar","collapseOnSelect","expand","bg","Toggle","aria-controls","Nav","Form","inline","href","faCaretLeft","faHandPaper","NavDropdown","Item","handlePageChange","page","changeDir","setPage","maxPage","setProgress","TaskProgress","taskInformation","ProgressBar","now","faCaretRight","ImageBlock","contents","TextBlock","onReady","pauseVideo","VideoBlock","videoId","InputGroup","FormControl","mcQ","QuizBlock","reqScore","IntroBlock","BlockPageHandler","blockList","blocks","block","iBlock","imageUrl","tBlock","qBlock","vBlock","videoUrl","TaskView","taskByIdQuery","useGetTaskByIdQuery","undefined","length","Alert","Content","path","Navigation","Brand","Link","Auth","signOut","setUser","storeToken","currentSession","userSession","accessToken","getAccessToken","jwt","getJwtToken","localStorage","setItem","JSON","stringify","currentAuthenticatedUser","authUser","useEffect","Hub","listen","payload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","environment","uri","process","mockQOne","mockQTwo","mockTask","missionId","missionIndex","pageIndex","blockIndex","isComplete","quizblockSubmissionVar","makeVar","quizblockSubmissionsVar","cache","InMemoryCache","typePolicies","Query","fields","read","mock","authLink","setContext","_","token","getItem","authorization","httpLink","HttpLink","apolloClient","ApolloClient","from","Amplify","configure","identityPoolId","region","userPoolId","userPoolWebClientId","oauth","domain","redirectSignIn","redirectSignOut","responseType","ReactDOM","StrictMode","rel","integrity","crossOrigin","client","document","getElementById"],"mappings":"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","file":"static/js/main.f94ad3df.chunk.js","sourcesContent":["var map = {\n\t\"./amplify-amazon-button_5.entry.js\": [\n\t\t625,\n\t\t16\n\t],\n\t\"./amplify-auth-fields_9.entry.js\": [\n\t\t626,\n\t\t17\n\t],\n\t\"./amplify-authenticator.entry.js\": [\n\t\t627,\n\t\t5\n\t],\n\t\"./amplify-button_3.entry.js\": [\n\t\t628,\n\t\t18\n\t],\n\t\"./amplify-chatbot.entry.js\": [\n\t\t629,\n\t\t4\n\t],\n\t\"./amplify-checkbox.entry.js\": [\n\t\t630,\n\t\t19\n\t],\n\t\"./amplify-confirm-sign-in_7.entry.js\": [\n\t\t631,\n\t\t6\n\t],\n\t\"./amplify-container.entry.js\": [\n\t\t632,\n\t\t20\n\t],\n\t\"./amplify-federated-buttons_2.entry.js\": [\n\t\t633,\n\t\t21\n\t],\n\t\"./amplify-federated-sign-in.entry.js\": [\n\t\t634,\n\t\t22\n\t],\n\t\"./amplify-form-field_4.entry.js\": [\n\t\t635,\n\t\t23\n\t],\n\t\"./amplify-greetings.entry.js\": [\n\t\t636,\n\t\t24\n\t],\n\t\"./amplify-icon-button.entry.js\": [\n\t\t637,\n\t\t25\n\t],\n\t\"./amplify-icon.entry.js\": [\n\t\t638,\n\t\t7\n\t],\n\t\"./amplify-link.entry.js\": [\n\t\t639,\n\t\t26\n\t],\n\t\"./amplify-nav_2.entry.js\": [\n\t\t640,\n\t\t27\n\t],\n\t\"./amplify-photo-picker.entry.js\": [\n\t\t641,\n\t\t28\n\t],\n\t\"./amplify-picker.entry.js\": [\n\t\t642,\n\t\t29\n\t],\n\t\"./amplify-radio-button_2.entry.js\": [\n\t\t643,\n\t\t8\n\t],\n\t\"./amplify-s3-album.entry.js\": [\n\t\t644,\n\t\t9\n\t],\n\t\"./amplify-s3-image-picker.entry.js\": [\n\t\t645,\n\t\t10\n\t],\n\t\"./amplify-s3-image.entry.js\": [\n\t\t646,\n\t\t11\n\t],\n\t\"./amplify-s3-text-picker.entry.js\": [\n\t\t647,\n\t\t12\n\t],\n\t\"./amplify-s3-text.entry.js\": [\n\t\t648,\n\t\t13\n\t],\n\t\"./amplify-select-mfa-type.entry.js\": [\n\t\t649,\n\t\t30\n\t],\n\t\"./amplify-sign-in-button.entry.js\": [\n\t\t650,\n\t\t14\n\t],\n\t\"./amplify-toast.entry.js\": [\n\t\t651,\n\t\t31\n\t],\n\t\"./amplify-tooltip.entry.js\": [\n\t\t652,\n\t\t32\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 489;\nmodule.exports = webpackAsyncContext;","import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n   faChalkboardTeacher,\n   faUserFriends,\n   faComments,\n   faMedal,\n   faTasks,\n   faChartLine,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport { Link } from 'react-router-dom';\n\nimport './Sidebar.css';\n\ntype Props = { text: string; icon: IconDefinition; link: string };\n\nfunction IconMenu({ text, icon, link }: Props) {\n   return (\n      <Link to={link} className=\"menu-container\">\n         <div className=\"menu-icon\">\n            <FontAwesomeIcon icon={icon} size=\"2x\" />\n         </div>\n         <p className=\"menu-text\">{text}</p>\n      </Link>\n   );\n}\n\nconst menus: Props[] = [\n   {\n      text: 'DashBoard',\n      icon: faChalkboardTeacher,\n      link: '/dashboard',\n   },\n   {\n      text: 'Student',\n      icon: faUserFriends,\n      link: '/studentOverview/Biology',\n   },\n   {\n      text: 'Task',\n      icon: faTasks,\n      link: '/taskSubmissionOverview',\n   },\n   {\n      text: 'Mastery',\n      icon: faChartLine,\n      link: '/singleStudentMasteryOverview',\n   },\n   {\n      text: 'Goals',\n      icon: faMedal,\n      link: '/singleStudentOverview',\n   },\n   {\n      text: 'Message',\n      icon: faComments,\n      link: '',\n   },\n];\n\nexport default function Sidebar() {\n   return (\n      <div className=\"sidebar\">\n         {menus.map((menu) => (\n            <IconMenu text={menu.text} icon={menu.icon} link={menu.link} />\n         ))}\n      </div>\n   );\n}\n","import { gql } from '@apollo/client';\n\nexport const SAVE_COURSE = gql`\n   mutation AddCourse($course: CourseInput!) {\n      addCourse(course: $course) {\n         id\n         name\n      }\n   }\n`;\n","import {\n   Button,\n   Dialog,\n   DialogTitle,\n   DialogContent,\n   TextField,\n   DialogActions,\n} from '@material-ui/core';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { Formik } from 'formik';\nimport { useMutation } from '@apollo/client';\nimport { withAuthenticator } from '@aws-amplify/ui-react';\nimport { SAVE_COURSE } from '../../queries/course-queries';\n\nconst LargeTextField = styled(TextField)`\n   input {\n      height: 50px;\n      font-size: 20px;\n   }\n`;\n\nfunction CreateCourseDialog() {\n   const [open, setOpen] = useState(false);\n   const [addCourse] = useMutation(SAVE_COURSE);\n\n   const handleClickOpen = () => {\n      setOpen(true);\n   };\n\n   const handleClose = () => {\n      setOpen(false);\n   };\n\n   return (\n      <div>\n         <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleClickOpen}\n            data-testid=\"create-btn\"\n         >\n            Create New Course\n         </Button>\n         <Dialog\n            open={open}\n            fullWidth\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n            maxWidth=\"sm\"\n            data-testid=\"create-dialog\"\n         >\n            <DialogTitle id=\"form-dialog-title\">New Course</DialogTitle>\n            <DialogContent>\n               <Formik\n                  initialValues={{\n                     courseTitle: '',\n                     courseDescription: '',\n                     instructor: 'currentUser',\n                  }}\n                  onSubmit={(values, { setSubmitting }) => {\n                     setTimeout(() => {\n                        setSubmitting(false);\n                        handleClose();\n                        addCourse({\n                           variables: {\n                              course: {\n                                 name: values.courseTitle,\n                                 description: values.courseDescription,\n                                 instructor: 'Mr. Butcher',\n                                 missions: [],\n                              },\n                           },\n                        }).catch((error) => console.log(error));\n                     }, 400);\n                  }}\n               >\n                  {({ values, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                     <form onSubmit={handleSubmit}>\n                        <LargeTextField\n                           id=\"courseTitle\"\n                           label=\"Course Title\"\n                           type=\"text\"\n                           fullWidth\n                           variant=\"outlined\"\n                           margin=\"dense\"\n                           value={values.courseTitle}\n                           onChange={handleChange}\n                           onBlur={handleBlur}\n                        />\n\n                        <LargeTextField\n                           id=\"courseDescription\"\n                           label=\"Description\"\n                           type=\"text\"\n                           fullWidth\n                           variant=\"outlined\"\n                           margin=\"dense\"\n                           value={values.courseDescription}\n                           onChange={handleChange}\n                           onBlur={handleBlur}\n                        />\n\n                        <DialogActions>\n                           <Button onClick={handleClose} color=\"primary\">\n                              Cancel\n                           </Button>\n                           <Button type=\"submit\" disabled={isSubmitting} color=\"primary\">\n                              Create\n                           </Button>\n                        </DialogActions>\n                     </form>\n                  )}\n               </Formik>\n            </DialogContent>\n         </Dialog>\n      </div>\n   );\n}\n\nexport default withAuthenticator(CreateCourseDialog);\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  Date: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Answer = {\n  questionId?: Maybe<Scalars['String']>;\n  pointsAwarded?: Maybe<Scalars['Int']>;\n  /** Either the id of the chosen answer id or the provided free response */\n  answer?: Maybe<Scalars['String']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type CourseContent = {\n  courseInfo: CourseInfo;\n  missions: Array<Mission>;\n  targets: Array<Target>;\n};\n\nexport type CourseInfo = {\n  courseId: Scalars['String'];\n  course: Scalars['String'];\n  instructor: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type CourseInput = {\n  course: Scalars['String'];\n  instructor: Scalars['String'];\n  description: Scalars['String'];\n};\n\n\nexport type FrQuestion = Question & {\n  id: Scalars['String'];\n  description: Scalars['String'];\n  points: Scalars['Int'];\n  answer?: Maybe<Scalars['String']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type FrQuestionInput = {\n  description: Scalars['String'];\n  points: Scalars['Int'];\n  answer: Scalars['String'];\n};\n\n/** Represents a students answer to a free response question */\nexport type FreeResponseAnswerInput = {\n  /** The id of the task the question block is contained in */\n  taskId: Scalars['String'];\n  /** the id of the quiz block the question is contained in */\n  questionBlockId: Scalars['String'];\n  /** The id of the question block the student is answering */\n  questionId: Scalars['String'];\n  /** The string response provided by the student */\n  answer: Scalars['String'];\n};\n\nexport type ImageBlock = TaskBlock & {\n  title: Scalars['String'];\n  blockId: Scalars['String'];\n  blockIndex: Scalars['Int'];\n  pageIndex: Scalars['Int'];\n  imageUrl: Scalars['String'];\n};\n\nexport type ImageBlockInput = {\n  taskId: Scalars['String'];\n  title: Scalars['String'];\n  pageIndex: Scalars['Int'];\n  blockIndex: Scalars['Int'];\n  imageUrl: Scalars['String'];\n};\n\nexport type McQuestion = Question & {\n  id: Scalars['String'];\n  description: Scalars['String'];\n  points: Scalars['Int'];\n  options: Array<QuestionOption>;\n  answers: Array<Scalars['Int']>;\n  feedback?: Maybe<Scalars['String']>;\n};\n\nexport type McQuestionInput = {\n  description: Scalars['String'];\n  points: Scalars['Int'];\n  options: Array<Scalars['String']>;\n  answers: Array<Scalars['Int']>;\n};\n\nexport type Mission = {\n  id: Scalars['String'];\n  course: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  missionContent?: Maybe<Array<Maybe<MissionContent>>>;\n};\n\nexport type MissionContent = Task | SubMission;\n\nexport type MissionInput = {\n  course: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n};\n\n/** Represents a students answer to a multiple choice question */\nexport type MultipleChoiceAnswerInput = {\n  /** The id of the task the quiz block is contained in */\n  taskId: Scalars['String'];\n  /** the id of the quiz block the question is contained in */\n  questionBlockId: Scalars['String'];\n  /** The id of the question the student is answering */\n  questionId: Scalars['String'];\n  /** The id of the question option chosen by the student */\n  answerId: Scalars['Int'];\n};\n\nexport type Mutation = {\n  updateUser?: Maybe<UpdateUserOutput>;\n  addMission: Scalars['String'];\n  addSubMission: Scalars['String'];\n  addCourse: Scalars['String'];\n  addTask: Scalars['String'];\n  addFrQuestion: Scalars['String'];\n  addMcQuestion: Scalars['String'];\n  /**\n   * Should be called when a student has completed all rubric requirements and answered\n   * all questions in the task. If the above requirements are not satisfied, this will return\n   * an error. Tells the system that the task is ready for grading.\n   *\n   * Even on a successful submission, many fields may be null\n   * as a Task may require manual grading by an instructor.\n   */\n  submitTask: TaskSubmissionResult;\n  /**\n   * Saves completed rubric requirements linked to this task for the user\n   * calling this function\n   */\n  submitTaskProgress: Scalars['String'];\n  /** Saves a students answer to a multiple choice question quiz block */\n  saveMultipleChoiceProgress: Scalars['Boolean'];\n  /** Saves and a students answer to a free response question quiz block */\n  saveFreeResponseProgress: Scalars['Boolean'];\n  addTextBlock: Scalars['String'];\n  addImageBlock: Scalars['String'];\n  addVideoBlock: Scalars['String'];\n  addQuizBlock: Scalars['String'];\n  addTarget: Scalars['String'];\n  addObjective: Scalars['String'];\n  addProgress: Scalars['String'];\n};\n\n\nexport type MutationUpdateUserArgs = {\n  updateUserInput?: Maybe<UpdateUserInput>;\n};\n\n\nexport type MutationAddMissionArgs = {\n  mission: MissionInput;\n};\n\n\nexport type MutationAddSubMissionArgs = {\n  subMission: SubMissionInput;\n};\n\n\nexport type MutationAddCourseArgs = {\n  course: CourseInput;\n};\n\n\nexport type MutationAddTaskArgs = {\n  task: TaskInput;\n};\n\n\nexport type MutationAddFrQuestionArgs = {\n  question: FrQuestionInput;\n};\n\n\nexport type MutationAddMcQuestionArgs = {\n  question: McQuestionInput;\n};\n\n\nexport type MutationSubmitTaskArgs = {\n  taskId?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationSubmitTaskProgressArgs = {\n  taskProgress?: Maybe<TaskProgressInput>;\n};\n\n\nexport type MutationSaveMultipleChoiceProgressArgs = {\n  mcBlockInput?: Maybe<MultipleChoiceAnswerInput>;\n};\n\n\nexport type MutationSaveFreeResponseProgressArgs = {\n  frBlockInput?: Maybe<FreeResponseAnswerInput>;\n};\n\n\nexport type MutationAddTextBlockArgs = {\n  textblock: TextBlockInput;\n};\n\n\nexport type MutationAddImageBlockArgs = {\n  imageblock: ImageBlockInput;\n};\n\n\nexport type MutationAddVideoBlockArgs = {\n  videoblock: VideoBlockInput;\n};\n\n\nexport type MutationAddQuizBlockArgs = {\n  quizblock: QuizBlockInput;\n};\n\n\nexport type MutationAddTargetArgs = {\n  target: TargetInput;\n};\n\n\nexport type MutationAddObjectiveArgs = {\n  objective: ObjectiveInput;\n};\n\n\nexport type MutationAddProgressArgs = {\n  progress: ProgressInput;\n};\n\nexport type Objective = {\n  objectiveId: Scalars['String'];\n  objectiveName: Scalars['String'];\n  description: Scalars['String'];\n  targetId: Scalars['String'];\n  targetName: Scalars['String'];\n  course: Scalars['String'];\n  tasks: Array<Task>;\n};\n\nexport type ObjectiveInput = {\n  objectiveName: Scalars['String'];\n  description: Scalars['String'];\n  targetId: Scalars['String'];\n  targetName: Scalars['String'];\n  course: Scalars['String'];\n};\n\nexport type Page = {\n  blocks: Array<TaskBlock>;\n  skippable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type PageInput = {\n  skippable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Progress = {\n  taskId: Scalars['String'];\n  status: Scalars['Boolean'];\n};\n\nexport type ProgressInput = {\n  userName: Scalars['String'];\n  course: Scalars['String'];\n  taskId: Scalars['String'];\n  status: Scalars['Boolean'];\n};\n\nexport type ProgressOverview = {\n  userProgress: Array<UserProgress>;\n  courseInfo: CourseInfo;\n  missions: Array<Mission>;\n  targets: Array<Target>;\n};\n\nexport type ProgresssDeletionInput = {\n  userName: Scalars['String'];\n  course: Scalars['String'];\n  taskId: Scalars['String'];\n};\n\nexport type Query = {\n  getUser?: Maybe<User>;\n  mission?: Maybe<Mission>;\n  missions?: Maybe<Array<Maybe<Mission>>>;\n  subMission?: Maybe<SubMission>;\n  _empty?: Maybe<Scalars['String']>;\n  courseInfo: CourseInfo;\n  courseInfos: Array<CourseInfo>;\n  courseContent: CourseContent;\n  task: Task;\n  tasks: Array<Task>;\n  taskInfo: Task;\n  tasksByCourse: Array<Task>;\n  questions: Array<Question>;\n  /**\n   * Returns an existing task submission or errors if it does not exist.\n   * May be useful as a TaskSubmissionResult can change as a result of instructor actions.\n   */\n  retrieveTaskSubmission?: Maybe<TaskSubmissionResult>;\n  /** Returns student's progress on the rubric requirements for the task if it exists. */\n  retrieveTaskProgress?: Maybe<TaskProgress>;\n  /** Returns student's task progress on the rubric requirements if it exists. */\n  retrieveQuestionProgress: QuestionProgress;\n  quizblock: QuizBlock;\n  target: Target;\n  targets: Array<Target>;\n  objective: Objective;\n  objectives: Array<Objective>;\n  progressByCourse: Array<UserProgress>;\n  userProgress: UserProgress;\n  progressOverview: ProgressOverview;\n};\n\n\nexport type QueryMissionArgs = {\n  missionId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryMissionsArgs = {\n  course?: Maybe<Scalars['String']>;\n};\n\n\nexport type QuerySubMissionArgs = {\n  subMissionId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCourseInfoArgs = {\n  courseId: Scalars['String'];\n};\n\n\nexport type QueryCourseInfosArgs = {\n  instructor: Scalars['String'];\n};\n\n\nexport type QueryCourseContentArgs = {\n  course: Scalars['String'];\n};\n\n\nexport type QueryTaskArgs = {\n  taskId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryTasksArgs = {\n  subMissionId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryTaskInfoArgs = {\n  taskId: Scalars['String'];\n};\n\n\nexport type QueryTasksByCourseArgs = {\n  course: Scalars['String'];\n};\n\n\nexport type QueryQuestionsArgs = {\n  questionIds: Array<Scalars['String']>;\n};\n\n\nexport type QueryRetrieveTaskSubmissionArgs = {\n  taskId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRetrieveTaskProgressArgs = {\n  taskId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRetrieveQuestionProgressArgs = {\n  taskId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryQuizblockArgs = {\n  taskId: Scalars['String'];\n  blockId: Scalars['String'];\n};\n\n\nexport type QueryTargetArgs = {\n  targetId: Scalars['String'];\n};\n\n\nexport type QueryTargetsArgs = {\n  course: Scalars['String'];\n};\n\n\nexport type QueryObjectiveArgs = {\n  objectiveId: Scalars['String'];\n};\n\n\nexport type QueryObjectivesArgs = {\n  course: Scalars['String'];\n};\n\n\nexport type QueryProgressByCourseArgs = {\n  course: Scalars['String'];\n};\n\n\nexport type QueryUserProgressArgs = {\n  userName: Scalars['String'];\n  course: Scalars['String'];\n};\n\n\nexport type QueryProgressOverviewArgs = {\n  course: Scalars['String'];\n};\n\nexport interface Question {\n  id: Scalars['String'];\n  description: Scalars['String'];\n  points: Scalars['Int'];\n  feedback?: Maybe<Scalars['String']>;\n}\n\n/** An answer to a question that has been graded either automatically or by the teacher */\nexport type QuestionAndAnswer = {\n  /** The question, including its contents and point value */\n  question: Question;\n  /** The students answer to the question, including how many points were awarded. */\n  answer?: Maybe<Answer>;\n};\n\nexport type QuestionOption = {\n  id: Scalars['Int'];\n  description: Scalars['String'];\n};\n\nexport type QuestionProgress = {\n  /** The id of the task the user submitted progress towards. */\n  taskId: Scalars['String'];\n  /** Each recorded answer to the questions contained in the task. The points awarded will be null. */\n  answers: Array<Answer>;\n};\n\nexport type QuizBlock = TaskBlock & {\n  title: Scalars['String'];\n  blockId: Scalars['String'];\n  blockIndex: Scalars['Int'];\n  pageIndex: Scalars['Int'];\n  requiredScore: Scalars['Int'];\n  points: Scalars['Int'];\n  questions: Array<Question>;\n};\n\nexport type QuizBlockInput = {\n  taskId: Scalars['String'];\n  title: Scalars['String'];\n  pageIndex: Scalars['Int'];\n  blockIndex: Scalars['Int'];\n  requiredScore: Scalars['Int'];\n  points: Scalars['Int'];\n  questionIds: Array<Scalars['String']>;\n};\n\nexport enum Role {\n  Student = 'STUDENT',\n  Instructor = 'INSTRUCTOR'\n}\n\nexport type RubricRequirement = {\n  id: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  isComplete: Scalars['Boolean'];\n};\n\nexport type RubricRequirementInput = {\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type SubMission = {\n  id: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  missionId: Scalars['String'];\n  missionIndex: Scalars['Int'];\n  objectiveId?: Maybe<Scalars['String']>;\n  missionContent?: Maybe<Array<Maybe<MissionContent>>>;\n};\n\nexport type SubMissionInput = {\n  name: Scalars['String'];\n  description: Scalars['String'];\n  missionId: Scalars['String'];\n  missionIndex: Scalars['Int'];\n};\n\nexport type Target = {\n  targetId: Scalars['String'];\n  targetName: Scalars['String'];\n  description: Scalars['String'];\n  subject: Scalars['String'];\n  gradeLevel: Scalars['Int'];\n  icon: Scalars['String'];\n  standards: Scalars['String'];\n  course: Scalars['String'];\n  objectives: Array<Objective>;\n};\n\nexport type TargetInput = {\n  targetName: Scalars['String'];\n  description: Scalars['String'];\n  subject: Scalars['String'];\n  gradeLevel: Scalars['Int'];\n  icon: Scalars['String'];\n  standards: Scalars['String'];\n  course: Scalars['String'];\n};\n\nexport type Task = {\n  id: Scalars['String'];\n  name: Scalars['String'];\n  instructions: Scalars['String'];\n  points: Scalars['Int'];\n  startAt?: Maybe<Scalars['Date']>;\n  endAt?: Maybe<Scalars['Date']>;\n  dueDate?: Maybe<Scalars['Date']>;\n  pages: Array<Page>;\n  requirements: Array<RubricRequirement>;\n  course: Scalars['String'];\n  missionId: Scalars['String'];\n  missionIndex: Scalars['Int'];\n  subMissionId?: Maybe<Scalars['String']>;\n  objectiveId?: Maybe<Scalars['String']>;\n  targetId?: Maybe<Scalars['String']>;\n};\n\nexport interface TaskBlock {\n  title: Scalars['String'];\n  blockId: Scalars['String'];\n  blockIndex: Scalars['Int'];\n  pageIndex: Scalars['Int'];\n}\n\nexport type TaskInput = {\n  name: Scalars['String'];\n  instructions: Scalars['String'];\n  points: Scalars['Int'];\n  startAt?: Maybe<Scalars['Date']>;\n  endAt?: Maybe<Scalars['Date']>;\n  dueDate?: Maybe<Scalars['Date']>;\n  pages: Array<Maybe<PageInput>>;\n  requirements: Array<RubricRequirementInput>;\n  course: Scalars['String'];\n  missionId: Scalars['String'];\n  missionIndex: Scalars['Int'];\n  subMissionId?: Maybe<Scalars['String']>;\n  objectiveId?: Maybe<Scalars['String']>;\n  targetId?: Maybe<Scalars['String']>;\n};\n\nexport type TaskProgress = {\n  /** The id of the task the user submitted progress towards. */\n  taskId: Scalars['String'];\n  username: Scalars['String'];\n  /** The ids of each requirement */\n  finishedRequirementIds: Array<Scalars['String']>;\n};\n\nexport type TaskProgressInput = {\n  /** The id of the task the user is submitting progress towards. */\n  taskId: Scalars['String'];\n  /**\n   * The id if each requirement contained within each\n   * completed block\n   */\n  finishedRequirementIds: Array<Scalars['String']>;\n};\n\n/**\n * Created when all requirements for a task have been satisfied and a task has\n * been submitted. Many fields may be null pending grading by the teacher\n */\nexport type TaskSubmissionResult = {\n  /** Will be true when the teacher has finalized their grading on the task */\n  graded: Scalars['Boolean'];\n  /**\n   * The current amount of points awarded for completing this task.\n   * May be different before and after graded is set based on a combination of\n   * automatic scoring and teacher grading\n   */\n  pointsAwarded?: Maybe<Scalars['Int']>;\n  pointsPossible?: Maybe<Scalars['Int']>;\n  /**\n   * Information on the student result\n   * for each question as well as the question itself\n   */\n  questionAndAnswers?: Maybe<Array<QuestionAndAnswer>>;\n  teacherComment?: Maybe<Scalars['String']>;\n};\n\nexport type TextBlock = TaskBlock & {\n  title: Scalars['String'];\n  blockId: Scalars['String'];\n  blockIndex: Scalars['Int'];\n  pageIndex: Scalars['Int'];\n  contents?: Maybe<Scalars['String']>;\n  fontSize?: Maybe<Scalars['Int']>;\n};\n\nexport type TextBlockInput = {\n  taskId: Scalars['String'];\n  title: Scalars['String'];\n  pageIndex: Scalars['Int'];\n  blockIndex: Scalars['Int'];\n  contents: Scalars['String'];\n  fontSize: Scalars['Int'];\n};\n\nexport type UpdateUserInput = {\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n};\n\nexport type UpdateUserOutput = {\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n};\n\n\nexport type User = {\n  id: Scalars['String'];\n  role: Role;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type UserProgress = {\n  userName: Scalars['String'];\n  progress: Array<Progress>;\n};\n\nexport type VideoBlock = TaskBlock & {\n  title: Scalars['String'];\n  blockId: Scalars['String'];\n  blockIndex: Scalars['Int'];\n  pageIndex: Scalars['Int'];\n  videoUrl: Scalars['String'];\n};\n\nexport type VideoBlockInput = {\n  taskId: Scalars['String'];\n  title: Scalars['String'];\n  pageIndex: Scalars['Int'];\n  blockIndex: Scalars['Int'];\n  videoUrl: Scalars['String'];\n};\n\nexport type ObjectivesQueryVariables = Exact<{\n  course: Scalars['String'];\n}>;\n\n\nexport type ObjectivesQuery = (\n  { __typename: 'Query' }\n  & { objectives: Array<(\n    { __typename: 'Objective' }\n    & ObjectiveFieldsFragment\n  )> }\n);\n\nexport type ObjectiveFieldsFragment = (\n  { __typename: 'Objective' }\n  & Pick<Objective, 'objectiveId' | 'objectiveName' | 'description' | 'targetId' | 'targetName' | 'course'>\n);\n\nexport type ProgressOverviewQueryVariables = Exact<{\n  course: Scalars['String'];\n}>;\n\n\nexport type ProgressOverviewQuery = (\n  { __typename: 'Query' }\n  & { progressOverview: (\n    { __typename: 'ProgressOverview' }\n    & { userProgress: Array<(\n      { __typename: 'UserProgress' }\n      & UserProgressFieldsFragment\n    )>, courseInfo: (\n      { __typename: 'CourseInfo' }\n      & CourseInfoFieldsFragment\n    ), missions: Array<(\n      { __typename: 'Mission' }\n      & MissionFieldsFragment\n    )>, targets: Array<(\n      { __typename: 'Target' }\n      & TargetFieldsFragment\n    )> }\n  ) }\n);\n\nexport type UserProgressFieldsFragment = (\n  { __typename: 'UserProgress' }\n  & Pick<UserProgress, 'userName'>\n  & { progress: Array<(\n    { __typename: 'Progress' }\n    & ProgressFieldsFragment\n  )> }\n);\n\nexport type ProgressFieldsFragment = (\n  { __typename: 'Progress' }\n  & Pick<Progress, 'taskId' | 'status'>\n);\n\nexport type CourseInfoFieldsFragment = (\n  { __typename: 'CourseInfo' }\n  & Pick<CourseInfo, 'courseId' | 'course' | 'instructor' | 'description'>\n);\n\nexport type TargetFieldsFragment = (\n  { __typename: 'Target' }\n  & Pick<Target, 'targetName'>\n  & { objectives: Array<(\n    { __typename: 'Objective' }\n    & ProgressObjectiveFieldsFragment\n  )> }\n);\n\nexport type MissionFieldsFragment = (\n  { __typename: 'Mission' }\n  & Pick<Mission, 'id' | 'name'>\n  & { missionContent?: Maybe<Array<Maybe<(\n    { __typename: 'Task' }\n    & MissionContentFields_Task_Fragment\n  ) | (\n    { __typename: 'SubMission' }\n    & MissionContentFields_SubMission_Fragment\n  )>>> }\n);\n\ntype MissionContentFields_Task_Fragment = (\n  { __typename: 'Task' }\n  & TaskFieldsFragment\n);\n\ntype MissionContentFields_SubMission_Fragment = (\n  { __typename: 'SubMission' }\n  & Pick<SubMission, 'id' | 'name'>\n);\n\nexport type MissionContentFieldsFragment = MissionContentFields_Task_Fragment | MissionContentFields_SubMission_Fragment;\n\nexport type ProgressObjectiveFieldsFragment = (\n  { __typename: 'Objective' }\n  & Pick<Objective, 'objectiveId' | 'objectiveName'>\n  & { tasks: Array<(\n    { __typename: 'Task' }\n    & TaskFieldsFragment\n  )> }\n);\n\nexport type TaskFieldsFragment = (\n  { __typename: 'Task' }\n  & Pick<Task, 'id' | 'name'>\n);\n\nexport type GetCoursesQueryVariables = Exact<{\n  instructor: Scalars['String'];\n}>;\n\n\nexport type GetCoursesQuery = (\n  { __typename: 'Query' }\n  & { courseInfos: Array<(\n    { __typename: 'CourseInfo' }\n    & CourseInfoFieldsFragment\n  )> }\n);\n\nexport type QuizBlockQueryVariables = Exact<{\n  taskId: Scalars['String'];\n  blockId: Scalars['String'];\n}>;\n\n\nexport type QuizBlockQuery = (\n  { __typename: 'Query' }\n  & { quizblock: (\n    { __typename: 'QuizBlock' }\n    & Pick<QuizBlock, 'blockId' | 'title' | 'blockIndex' | 'pageIndex' | 'requiredScore' | 'points'>\n    & { questions: Array<(\n      { __typename: 'FrQuestion' }\n      & FrQuestionFieldsFragment\n    ) | (\n      { __typename: 'McQuestion' }\n      & McQuestionFieldsFragment\n    )> }\n  ) }\n);\n\nexport type McQuestionFieldsFragment = (\n  { __typename: 'McQuestion' }\n  & Pick<McQuestion, 'id' | 'description' | 'feedback' | 'points' | 'answers'>\n  & { options: Array<(\n    { __typename: 'QuestionOption' }\n    & Pick<QuestionOption, 'id' | 'description'>\n  )> }\n);\n\nexport type FrQuestionFieldsFragment = (\n  { __typename: 'FrQuestion' }\n  & Pick<FrQuestion, 'id' | 'description' | 'feedback' | 'points' | 'answer'>\n);\n\nexport type AnswerFieldsFragment = (\n  { __typename: 'Answer' }\n  & Pick<Answer, 'pointsAwarded' | 'questionId' | 'answer'>\n);\n\nexport type TaskSubmissionResultQueryVariables = Exact<{\n  taskId?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type TaskSubmissionResultQuery = (\n  { __typename: 'Query' }\n  & { retrieveTaskSubmission?: Maybe<(\n    { __typename: 'TaskSubmissionResult' }\n    & Pick<TaskSubmissionResult, 'graded' | 'pointsAwarded' | 'pointsPossible' | 'teacherComment'>\n    & { questionAndAnswers?: Maybe<Array<(\n      { __typename: 'QuestionAndAnswer' }\n      & QuestionAndAnswerFieldsFragment\n    )>> }\n  )> }\n);\n\nexport type QuestionAndAnswerFieldsFragment = (\n  { __typename: 'QuestionAndAnswer' }\n  & { question: (\n    { __typename: 'FrQuestion' }\n    & FrQuestionFieldsFragment\n  ) | (\n    { __typename: 'McQuestion' }\n    & McQuestionFieldsFragment\n  ), answer?: Maybe<(\n    { __typename: 'Answer' }\n    & AnswerFieldsFragment\n  )> }\n);\n\nexport type GetTaskByIdQueryVariables = Exact<{\n  taskId: Scalars['String'];\n}>;\n\n\nexport type GetTaskByIdQuery = (\n  { __typename: 'Query' }\n  & { task: (\n    { __typename: 'Task' }\n    & Pick<Task, 'id' | 'name' | 'instructions' | 'points' | 'startAt' | 'endAt' | 'dueDate' | 'missionId' | 'missionIndex' | 'subMissionId' | 'objectiveId' | 'targetId'>\n    & { requirements: Array<(\n      { __typename: 'RubricRequirement' }\n      & Pick<RubricRequirement, 'id' | 'description'>\n    )>, pages: Array<(\n      { __typename: 'Page' }\n      & PageFieldsFragment\n    )> }\n  ) }\n);\n\nexport type PageFieldsFragment = (\n  { __typename: 'Page' }\n  & Pick<Page, 'skippable'>\n  & { blocks: Array<(\n    { __typename: 'ImageBlock' }\n    & ImageBlockFieldsFragment\n  ) | (\n    { __typename: 'QuizBlock' }\n    & QuizBlockFieldsFragment\n  ) | (\n    { __typename: 'TextBlock' }\n    & TextBlockFieldsFragment\n  ) | (\n    { __typename: 'VideoBlock' }\n    & VideoBlockFieldsFragment\n  )> }\n);\n\nexport type TextBlockFieldsFragment = (\n  { __typename: 'TextBlock' }\n  & Pick<TextBlock, 'title' | 'contents' | 'fontSize'>\n);\n\nexport type VideoBlockFieldsFragment = (\n  { __typename: 'VideoBlock' }\n  & Pick<VideoBlock, 'title' | 'videoUrl'>\n);\n\nexport type ImageBlockFieldsFragment = (\n  { __typename: 'ImageBlock' }\n  & Pick<ImageBlock, 'imageUrl'>\n);\n\nexport type QuizBlockFieldsFragment = (\n  { __typename: 'QuizBlock' }\n  & Pick<QuizBlock, 'title' | 'requiredScore'>\n  & { questions: Array<(\n    { __typename: 'FrQuestion' }\n    & FrQuestionFieldsFragment\n  ) | (\n    { __typename: 'McQuestion' }\n    & McQuestionFieldsFragment\n  )> }\n);\n\nexport const ObjectiveFieldsFragmentDoc = gql`\n    fragment ObjectiveFields on Objective {\n  objectiveId\n  objectiveName\n  description\n  targetId\n  targetName\n  course\n}\n    `;\nexport const ProgressFieldsFragmentDoc = gql`\n    fragment ProgressFields on Progress {\n  taskId\n  status\n}\n    `;\nexport const UserProgressFieldsFragmentDoc = gql`\n    fragment UserProgressFields on UserProgress {\n  userName\n  progress {\n    ...ProgressFields\n  }\n}\n    ${ProgressFieldsFragmentDoc}`;\nexport const CourseInfoFieldsFragmentDoc = gql`\n    fragment CourseInfoFields on CourseInfo {\n  courseId\n  course\n  instructor\n  description\n}\n    `;\nexport const TaskFieldsFragmentDoc = gql`\n    fragment TaskFields on Task {\n  id\n  name\n}\n    `;\nexport const ProgressObjectiveFieldsFragmentDoc = gql`\n    fragment ProgressObjectiveFields on Objective {\n  objectiveId\n  objectiveName\n  tasks {\n    ...TaskFields\n  }\n}\n    ${TaskFieldsFragmentDoc}`;\nexport const TargetFieldsFragmentDoc = gql`\n    fragment TargetFields on Target {\n  targetName\n  objectives {\n    ...ProgressObjectiveFields\n  }\n}\n    ${ProgressObjectiveFieldsFragmentDoc}`;\nexport const MissionContentFieldsFragmentDoc = gql`\n    fragment MissionContentFields on MissionContent {\n  ... on Task {\n    ...TaskFields\n  }\n  ... on SubMission {\n    id\n    name\n  }\n}\n    ${TaskFieldsFragmentDoc}`;\nexport const MissionFieldsFragmentDoc = gql`\n    fragment MissionFields on Mission {\n  id\n  name\n  missionContent {\n    ...MissionContentFields\n  }\n}\n    ${MissionContentFieldsFragmentDoc}`;\nexport const McQuestionFieldsFragmentDoc = gql`\n    fragment McQuestionFields on McQuestion {\n  id\n  description\n  feedback\n  points\n  options {\n    id\n    description\n  }\n  answers\n}\n    `;\nexport const FrQuestionFieldsFragmentDoc = gql`\n    fragment FrQuestionFields on FrQuestion {\n  id\n  description\n  feedback\n  points\n  answer\n}\n    `;\nexport const AnswerFieldsFragmentDoc = gql`\n    fragment AnswerFields on Answer {\n  pointsAwarded\n  questionId\n  answer\n}\n    `;\nexport const QuestionAndAnswerFieldsFragmentDoc = gql`\n    fragment QuestionAndAnswerFields on QuestionAndAnswer {\n  question {\n    ... on McQuestion {\n      ...McQuestionFields\n    }\n    ... on FrQuestion {\n      ...FrQuestionFields\n    }\n  }\n  answer {\n    ...AnswerFields\n  }\n}\n    ${McQuestionFieldsFragmentDoc}\n${FrQuestionFieldsFragmentDoc}\n${AnswerFieldsFragmentDoc}`;\nexport const TextBlockFieldsFragmentDoc = gql`\n    fragment TextBlockFields on TextBlock {\n  title\n  contents\n  fontSize\n}\n    `;\nexport const VideoBlockFieldsFragmentDoc = gql`\n    fragment VideoBlockFields on VideoBlock {\n  title\n  videoUrl\n}\n    `;\nexport const QuizBlockFieldsFragmentDoc = gql`\n    fragment QuizBlockFields on QuizBlock {\n  title\n  requiredScore\n  questions {\n    ... on McQuestion {\n      ...McQuestionFields\n    }\n    ... on FrQuestion {\n      ...FrQuestionFields\n    }\n  }\n}\n    ${McQuestionFieldsFragmentDoc}\n${FrQuestionFieldsFragmentDoc}`;\nexport const ImageBlockFieldsFragmentDoc = gql`\n    fragment ImageBlockFields on ImageBlock {\n  imageUrl\n}\n    `;\nexport const PageFieldsFragmentDoc = gql`\n    fragment PageFields on Page {\n  __typename\n  blocks {\n    __typename\n    ... on TextBlock {\n      ...TextBlockFields\n    }\n    ... on VideoBlock {\n      ...VideoBlockFields\n    }\n    ... on QuizBlock {\n      ...QuizBlockFields\n    }\n    ... on ImageBlock {\n      ...ImageBlockFields\n    }\n  }\n  skippable\n}\n    ${TextBlockFieldsFragmentDoc}\n${VideoBlockFieldsFragmentDoc}\n${QuizBlockFieldsFragmentDoc}\n${ImageBlockFieldsFragmentDoc}`;\nexport const ObjectivesDocument = gql`\n    query Objectives($course: String!) {\n  objectives(course: $course) {\n    ...ObjectiveFields\n  }\n}\n    ${ObjectiveFieldsFragmentDoc}`;\n\n/**\n * __useObjectivesQuery__\n *\n * To run a query within a React component, call `useObjectivesQuery` and pass it any options that fit your needs.\n * When your component renders, `useObjectivesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useObjectivesQuery({\n *   variables: {\n *      course: // value for 'course'\n *   },\n * });\n */\nexport function useObjectivesQuery(baseOptions: Apollo.QueryHookOptions<ObjectivesQuery, ObjectivesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ObjectivesQuery, ObjectivesQueryVariables>(ObjectivesDocument, options);\n      }\nexport function useObjectivesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ObjectivesQuery, ObjectivesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ObjectivesQuery, ObjectivesQueryVariables>(ObjectivesDocument, options);\n        }\nexport type ObjectivesQueryHookResult = ReturnType<typeof useObjectivesQuery>;\nexport type ObjectivesLazyQueryHookResult = ReturnType<typeof useObjectivesLazyQuery>;\nexport type ObjectivesQueryResult = Apollo.QueryResult<ObjectivesQuery, ObjectivesQueryVariables>;\nexport const ProgressOverviewDocument = gql`\n    query ProgressOverview($course: String!) {\n  progressOverview(course: $course) {\n    userProgress {\n      ...UserProgressFields\n    }\n    courseInfo {\n      ...CourseInfoFields\n    }\n    missions {\n      ...MissionFields\n    }\n    targets {\n      ...TargetFields\n    }\n  }\n}\n    ${UserProgressFieldsFragmentDoc}\n${CourseInfoFieldsFragmentDoc}\n${MissionFieldsFragmentDoc}\n${TargetFieldsFragmentDoc}`;\n\n/**\n * __useProgressOverviewQuery__\n *\n * To run a query within a React component, call `useProgressOverviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useProgressOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProgressOverviewQuery({\n *   variables: {\n *      course: // value for 'course'\n *   },\n * });\n */\nexport function useProgressOverviewQuery(baseOptions: Apollo.QueryHookOptions<ProgressOverviewQuery, ProgressOverviewQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProgressOverviewQuery, ProgressOverviewQueryVariables>(ProgressOverviewDocument, options);\n      }\nexport function useProgressOverviewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProgressOverviewQuery, ProgressOverviewQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProgressOverviewQuery, ProgressOverviewQueryVariables>(ProgressOverviewDocument, options);\n        }\nexport type ProgressOverviewQueryHookResult = ReturnType<typeof useProgressOverviewQuery>;\nexport type ProgressOverviewLazyQueryHookResult = ReturnType<typeof useProgressOverviewLazyQuery>;\nexport type ProgressOverviewQueryResult = Apollo.QueryResult<ProgressOverviewQuery, ProgressOverviewQueryVariables>;\nexport const GetCoursesDocument = gql`\n    query GetCourses($instructor: String!) {\n  courseInfos(instructor: $instructor) {\n    ...CourseInfoFields\n  }\n}\n    ${CourseInfoFieldsFragmentDoc}`;\n\n/**\n * __useGetCoursesQuery__\n *\n * To run a query within a React component, call `useGetCoursesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCoursesQuery({\n *   variables: {\n *      instructor: // value for 'instructor'\n *   },\n * });\n */\nexport function useGetCoursesQuery(baseOptions: Apollo.QueryHookOptions<GetCoursesQuery, GetCoursesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCoursesQuery, GetCoursesQueryVariables>(GetCoursesDocument, options);\n      }\nexport function useGetCoursesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCoursesQuery, GetCoursesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCoursesQuery, GetCoursesQueryVariables>(GetCoursesDocument, options);\n        }\nexport type GetCoursesQueryHookResult = ReturnType<typeof useGetCoursesQuery>;\nexport type GetCoursesLazyQueryHookResult = ReturnType<typeof useGetCoursesLazyQuery>;\nexport type GetCoursesQueryResult = Apollo.QueryResult<GetCoursesQuery, GetCoursesQueryVariables>;\nexport const QuizBlockDocument = gql`\n    query QuizBlock($taskId: String!, $blockId: String!) {\n  quizblock(taskId: $taskId, blockId: $blockId) {\n    blockId\n    title\n    blockIndex\n    pageIndex\n    requiredScore\n    points\n    questions {\n      ... on McQuestion {\n        ...McQuestionFields\n      }\n      ... on FrQuestion {\n        ...FrQuestionFields\n      }\n    }\n  }\n}\n    ${McQuestionFieldsFragmentDoc}\n${FrQuestionFieldsFragmentDoc}`;\n\n/**\n * __useQuizBlockQuery__\n *\n * To run a query within a React component, call `useQuizBlockQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuizBlockQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuizBlockQuery({\n *   variables: {\n *      taskId: // value for 'taskId'\n *      blockId: // value for 'blockId'\n *   },\n * });\n */\nexport function useQuizBlockQuery(baseOptions: Apollo.QueryHookOptions<QuizBlockQuery, QuizBlockQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<QuizBlockQuery, QuizBlockQueryVariables>(QuizBlockDocument, options);\n      }\nexport function useQuizBlockLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QuizBlockQuery, QuizBlockQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<QuizBlockQuery, QuizBlockQueryVariables>(QuizBlockDocument, options);\n        }\nexport type QuizBlockQueryHookResult = ReturnType<typeof useQuizBlockQuery>;\nexport type QuizBlockLazyQueryHookResult = ReturnType<typeof useQuizBlockLazyQuery>;\nexport type QuizBlockQueryResult = Apollo.QueryResult<QuizBlockQuery, QuizBlockQueryVariables>;\nexport const TaskSubmissionResultDocument = gql`\n    query TaskSubmissionResult($taskId: String) {\n  retrieveTaskSubmission(taskId: $taskId) {\n    graded\n    pointsAwarded\n    pointsPossible\n    questionAndAnswers {\n      ...QuestionAndAnswerFields\n    }\n    teacherComment\n  }\n}\n    ${QuestionAndAnswerFieldsFragmentDoc}`;\n\n/**\n * __useTaskSubmissionResultQuery__\n *\n * To run a query within a React component, call `useTaskSubmissionResultQuery` and pass it any options that fit your needs.\n * When your component renders, `useTaskSubmissionResultQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTaskSubmissionResultQuery({\n *   variables: {\n *      taskId: // value for 'taskId'\n *   },\n * });\n */\nexport function useTaskSubmissionResultQuery(baseOptions?: Apollo.QueryHookOptions<TaskSubmissionResultQuery, TaskSubmissionResultQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TaskSubmissionResultQuery, TaskSubmissionResultQueryVariables>(TaskSubmissionResultDocument, options);\n      }\nexport function useTaskSubmissionResultLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TaskSubmissionResultQuery, TaskSubmissionResultQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TaskSubmissionResultQuery, TaskSubmissionResultQueryVariables>(TaskSubmissionResultDocument, options);\n        }\nexport type TaskSubmissionResultQueryHookResult = ReturnType<typeof useTaskSubmissionResultQuery>;\nexport type TaskSubmissionResultLazyQueryHookResult = ReturnType<typeof useTaskSubmissionResultLazyQuery>;\nexport type TaskSubmissionResultQueryResult = Apollo.QueryResult<TaskSubmissionResultQuery, TaskSubmissionResultQueryVariables>;\nexport const GetTaskByIdDocument = gql`\n    query GetTaskById($taskId: String!) {\n  task(taskId: $taskId) {\n    id\n    requirements {\n      id\n      description\n    }\n    name\n    instructions\n    points\n    startAt\n    endAt\n    dueDate\n    missionId\n    missionIndex\n    subMissionId\n    objectiveId\n    targetId\n    pages {\n      ...PageFields\n    }\n  }\n}\n    ${PageFieldsFragmentDoc}`;\n\n/**\n * __useGetTaskByIdQuery__\n *\n * To run a query within a React component, call `useGetTaskByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTaskByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTaskByIdQuery({\n *   variables: {\n *      taskId: // value for 'taskId'\n *   },\n * });\n */\nexport function useGetTaskByIdQuery(baseOptions: Apollo.QueryHookOptions<GetTaskByIdQuery, GetTaskByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetTaskByIdQuery, GetTaskByIdQueryVariables>(GetTaskByIdDocument, options);\n      }\nexport function useGetTaskByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTaskByIdQuery, GetTaskByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetTaskByIdQuery, GetTaskByIdQueryVariables>(GetTaskByIdDocument, options);\n        }\nexport type GetTaskByIdQueryHookResult = ReturnType<typeof useGetTaskByIdQuery>;\nexport type GetTaskByIdLazyQueryHookResult = ReturnType<typeof useGetTaskByIdLazyQuery>;\nexport type GetTaskByIdQueryResult = Apollo.QueryResult<GetTaskByIdQuery, GetTaskByIdQueryVariables>;\n","import { Link } from 'react-router-dom';\nimport { CourseInfoFieldsFragment } from '../../__generated__/types';\nimport './CourseCard.css';\n\ntype Props = {\n   courseInfo: CourseInfoFieldsFragment;\n};\n\nexport default function CourseCard({ courseInfo }: Props) {\n   return (\n      <Link to={`/studentOverview/${courseInfo.course}`}>\n         <div className=\"course-card\">\n            <h3 className=\"title\">\n               <span>{courseInfo.course}</span>\n            </h3>\n            <p className=\"course-instructor\">{courseInfo.instructor}</p>\n            <p className=\"course-desc\">{courseInfo.description}</p>\n         </div>\n      </Link>\n   );\n}\n","import { CourseInfoFieldsFragment, useGetCoursesQuery } from '../../__generated__/types';\nimport CourseCard from './CourseCard';\nimport './DashBoard.css';\n\nfunction Dashboard() {\n   const { loading, error, data } = useGetCoursesQuery({\n      variables: {\n         instructor: 'Mr. Butcher',\n      },\n   });\n\n   if (loading) return <div>Loading...</div>;\n   if (error) return <div>`Error! ${error.message}`</div>;\n   if (!data) {\n      return <></>;\n   }\n   const { courseInfos } = data;\n\n   return (\n      <div className=\"dashboard-container\">\n         {courseInfos.map((courseInfo: CourseInfoFieldsFragment) => (\n            <CourseCard key={courseInfo.courseId} courseInfo={courseInfo} />\n         ))}\n      </div>\n   );\n}\n\nexport default Dashboard;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React from 'react';\nimport { useTable } from 'react-table';\n\n// Most of the table code came from here https://blog.logrocket.com/complete-guide-building-smart-data-table-react/\nfunction TableComponent({ columns, data }: any) {\n   const {\n      getTableProps, // table props from react-table\n      getTableBodyProps, // table body props from react-table\n      headerGroups, // headerGroups, if your table has groupings\n      rows, // rows for the table based on the data passed\n      prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\n   } = useTable({\n      columns,\n      data,\n   });\n\n   console.log(rows);\n   return (\n      <table {...getTableProps()}>\n         <thead>\n            {headerGroups.map((headerGroup) => (\n               <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map((column) => (\n                     <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                  ))}\n               </tr>\n            ))}\n         </thead>\n         <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n               prepareRow(row);\n               return (\n                  <tr {...row.getRowProps()}>\n                     {row.cells.map((cell) => {\n                        return (\n                           <td\n                              {...cell.getCellProps()}\n                              style={cell.value.style ? cell.value.style : {}}\n                           >\n                              {cell.render('Cell')}\n                           </td>\n                        );\n                     })}\n                  </tr>\n               );\n            })}\n         </tbody>\n      </table>\n   );\n}\n\nexport default TableComponent;\n","import React, { useMemo } from 'react';\nimport { Progress } from '../../interfaces/Progress';\nimport { Users } from '../../interfaces/Users';\nimport TableComponent from '../TableComponent/TableComponent';\nimport { useProgressOverviewQuery } from '../../__generated__/types';\n\nconst users: Users = {\n   users: [\n      {\n         id: '1',\n         firstName: 'Sansa',\n         lastName: 'Stark',\n      },\n      {\n         id: '2',\n         firstName: 'Robb',\n         lastName: 'Stark',\n      },\n      {\n         id: '3',\n         firstName: 'Arya',\n         lastName: 'Stark',\n      },\n      {\n         id: '4',\n         firstName: 'John',\n         lastName: 'Snow',\n      },\n   ],\n};\n\nconst userProgressMap = new Map<string, Progress>();\n\nfunction LTStudentViewTable() {\n   const { data: progressData } = useProgressOverviewQuery({\n      variables: {\n         course: 'Integrated Science',\n      },\n   });\n\n   // if (!progressData) {\n   //    return <p>Undefined data</p>;\n   // }\n\n   userProgressMap.set('1', {\n      curStatus: 'Task 1.1',\n      statusColor: '#00b300', // Green\n      time: '2:10',\n      // objective: objs[0],\n   });\n\n   userProgressMap.set('2', {\n      curStatus: 'Task 1.2',\n      statusColor: '#00b300', // Green\n      time: '1:30',\n      // objective: objs[1],\n   });\n\n   userProgressMap.set('3', {\n      curStatus: 'Task 2.1',\n      statusColor: '#a6a6a6', // Gray\n      time: '1:15',\n      // objective: objs[2],\n   });\n\n   userProgressMap.set('4', {\n      curStatus: 'Task 1.1',\n      statusColor: '#ff6666', // Red\n      time: '6:15',\n      // objective: objs[0],\n   });\n\n   const data: any[] = [];\n\n   users.users.map((user) =>\n      data.push({\n         row: {\n            section: 1,\n            userId: user.id,\n            name: `${user.firstName} ${user.lastName}`,\n            time: userProgressMap.get(user.id)?.time,\n            recent: {\n               status: userProgressMap.get(user.id)?.curStatus,\n               style: {\n                  backgroundColor: userProgressMap.get(user.id)?.statusColor,\n               },\n            },\n            average: '',\n            progress: '%',\n         },\n      })\n   );\n\n   const columns = useMemo(\n      () => [\n         {\n            Header: 'Section',\n            accessor: 'row.section',\n         },\n         {\n            Header: 'Student',\n            accessor: 'row.name',\n         },\n         {\n            Header: 'Time',\n            accessor: 'row.time',\n         },\n         {\n            Header: 'Recent',\n            accessor: 'row.recent',\n            Cell: ({ value }: { value: any }) => {\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n               return <>{value.status} </>;\n            },\n         },\n         {\n            Header: 'Average',\n            accessor: 'row.average',\n         },\n         {\n            Header: 'Progress',\n            accessor: 'row.progress',\n         },\n      ],\n      []\n   );\n\n   return (\n      <div className=\"base-table\">\n         <TableComponent columns={columns} data={data} />\n      </div>\n   );\n}\n\nexport default LTStudentViewTable;\n","import React, { useMemo } from 'react';\nimport TableComponent from '../TableComponent/TableComponent';\n\nfunction LTTargetViewTable() {\n   const data = [\n      {\n         row: {\n            section: 1,\n            target: 'LT1',\n            average: '60',\n            progress: '50%',\n            objectives: ['Obj1', 'Obj2'],\n         },\n      },\n      {\n         row: {\n            section: 1,\n            target: 'LT2',\n            average: '',\n            progress: '80%',\n            objectives: ['Obj1', 'Obj2'],\n         },\n      },\n   ];\n\n   const columns = useMemo(\n      () => [\n         {\n            Header: 'Section',\n            accessor: 'row.section',\n         },\n         {\n            Header: 'Target',\n            accessor: 'row.target',\n         },\n         {\n            Header: 'Average',\n            accessor: 'row.average',\n         },\n         {\n            Header: 'Progress',\n            accessor: 'row.progress',\n         },\n         {\n            Header: 'Objectives',\n            accessor: 'row.objectives',\n         },\n      ],\n      []\n   );\n\n   return (\n      <div className=\"base-table\">\n         <TableComponent columns={columns} data={data} />\n      </div>\n   );\n}\n\nexport default LTTargetViewTable;\n","import { Tab } from '@material-ui/core';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport React, { useState } from 'react';\nimport LTStudentViewTable from './LTStudentViewTable';\nimport LTTargetViewTable from './LTTargetViewTable';\n\nfunction LearningTargetTab() {\n   const [value, setValue] = useState('1');\n\n   const handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: string) => {\n      setValue(newValue);\n   };\n\n   return (\n      <TabContext value={value}>\n         <TabList onChange={handleChange} centered>\n            <Tab\n               label=\"Student View\"\n               value=\"1\"\n               className={value === '1' ? 'selected-inner-tab' : 'inner-tab'}\n            />\n            <Tab\n               label=\"Target View\"\n               value=\"2\"\n               className={value === '2' ? 'selected-inner-tab' : 'inner-tab'}\n            />\n         </TabList>\n         <TabPanel value=\"1\">\n            <LTStudentViewTable />\n         </TabPanel>\n         <TabPanel value=\"2\">\n            <LTTargetViewTable />\n         </TabPanel>\n      </TabContext>\n   );\n}\n\nexport default LearningTargetTab;\n","import {\n   createStyles,\n   makeStyles,\n   Paper,\n   Table,\n   TableBody,\n   TableCell,\n   TableContainer,\n   TableHead,\n   TableRow,\n   Theme,\n   withStyles,\n} from '@material-ui/core';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Progress } from '../../interfaces/Progress';\nimport { Users } from '../../interfaces/Users';\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n   createStyles({\n      head: {\n         backgroundColor: '#8484e1',\n         color: theme.palette.common.black,\n         borderBottom: '0px solid',\n      },\n      body: {\n         fontSize: 14,\n         borderBottom: '0px solid',\n      },\n   })\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n         },\n      },\n   })\n)(TableRow);\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         display: 'flex',\n         flexWrap: 'wrap',\n         '& > *': {\n            margin: theme.spacing(0),\n            width: theme.spacing(160),\n            height: theme.spacing(60),\n         },\n      },\n      table: {\n         minWidth: 700,\n      },\n      borderedHeaderCell: {\n         borderTop: '4px solid gray',\n         borderRight: '4px solid gray',\n      },\n      borderedCell: {\n         borderLeft: '4px solid gray',\n         borderRight: '4px solid gray',\n         borderBottom: '4px solid gray',\n      },\n      tableRow: {\n         '&:hover': {\n            backgroundColor: '#d9d9d9 !important',\n         },\n      },\n      tabContainer: {\n         flexGrow: 1,\n         backgroundColor: theme.palette.background.paper,\n      },\n   })\n);\n\nconst users: Users = {\n   users: [\n      {\n         id: '1',\n         firstName: 'Sansa',\n         lastName: 'Stark',\n      },\n      {\n         id: '2',\n         firstName: 'Robb',\n         lastName: 'Stark',\n      },\n      {\n         id: '3',\n         firstName: 'Arya',\n         lastName: 'Stark',\n      },\n      {\n         id: '4',\n         firstName: 'John',\n         lastName: 'Snow',\n      },\n   ],\n};\n\nconst userProgressMap = new Map<string, Progress>();\n\nfunction MissionStudentViewTable() {\n   const classes = useStyles();\n   const history = useHistory();\n\n   userProgressMap.set('1', {\n      curStatus: 'Task 1.1',\n      statusColor: '#00b300', // Green\n      time: '2:10',\n      // objective: objs[0],\n   });\n\n   userProgressMap.set('2', {\n      curStatus: 'Task 1.2',\n      statusColor: '#00b300', // Green\n      time: '1:30',\n      // objective: objs[1],\n   });\n\n   userProgressMap.set('3', {\n      curStatus: 'Task 2.1',\n      statusColor: '#a6a6a6', // Gray\n      time: '1:15',\n      // objective: objs[2],\n   });\n\n   userProgressMap.set('4', {\n      curStatus: 'Task 1.1',\n      statusColor: '#ff6666', // Red\n      time: '6:15',\n      // objective: objs[0],\n   });\n\n   return (\n      <TableContainer style={{ marginLeft: '5px' }} component={Paper}>\n         <Table className={classes.table} aria-label=\"customized table\">\n            <TableHead>\n               <TableRow>\n                  <StyledTableCell\n                     className={classes.borderedHeaderCell}\n                     style={{ borderLeft: '4px solid gray' }}\n                  >\n                     Section\n                  </StyledTableCell>\n                  <StyledTableCell className={classes.borderedHeaderCell}>Student</StyledTableCell>\n                  <StyledTableCell className={classes.borderedHeaderCell} align=\"center\">\n                     Time\n                  </StyledTableCell>\n                  <StyledTableCell className={classes.borderedHeaderCell} align=\"center\">\n                     Current\n                  </StyledTableCell>\n                  <StyledTableCell className={classes.borderedHeaderCell} align=\"center\">\n                     LT1\n                  </StyledTableCell>\n                  <StyledTableCell className={classes.borderedHeaderCell} align=\"center\">\n                     LT2\n                  </StyledTableCell>\n                  <StyledTableCell className={classes.borderedHeaderCell} align=\"center\">\n                     LT3\n                  </StyledTableCell>\n               </TableRow>\n            </TableHead>\n            <TableBody>\n               {users.users.map((user) => (\n                  <StyledTableRow\n                     hover\n                     style={{ cursor: 'pointer' }}\n                     className={classes.tableRow}\n                     onClick={() => {\n                        history.push({\n                           pathname: '/singleStudentOverview',\n                           state: user,\n                        });\n                     }}\n                  >\n                     <StyledTableCell className={classes.borderedCell} scope=\"row\">\n                        1\n                     </StyledTableCell>\n                     <StyledTableCell className={classes.borderedCell} scope=\"row\">\n                        {user.firstName} {user.lastName}\n                     </StyledTableCell>\n                     <StyledTableCell className={classes.borderedCell} scope=\"row\" align=\"center\">\n                        {userProgressMap.get(user.id)?.time}\n                     </StyledTableCell>\n                     <StyledTableCell\n                        className={classes.borderedCell}\n                        style={{\n                           backgroundColor: userProgressMap.get(user.id)?.statusColor,\n                        }}\n                        align=\"center\"\n                        scope=\"row\"\n                     >\n                        {userProgressMap.get(user.id)?.curStatus}\n                     </StyledTableCell>\n                     <StyledTableCell className={classes.borderedCell} />\n                     <StyledTableCell className={classes.borderedCell} />\n                     <StyledTableCell className={classes.borderedCell} />\n                  </StyledTableRow>\n               ))}\n            </TableBody>\n         </Table>\n      </TableContainer>\n   );\n}\n\nexport default MissionStudentViewTable;\n","import { Tab } from '@material-ui/core';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabList from '@material-ui/lab/TabList';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport React, { useState } from 'react';\nimport MissionStudentViewTable from './MissionStudentViewTable';\n\nfunction MissionsTab() {\n   const [value, setValue] = useState('1');\n\n   const handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: string) => {\n      setValue(newValue);\n   };\n\n   return (\n      <TabContext value={value}>\n         <TabList onChange={handleChange} centered>\n            <Tab\n               label=\"Student View\"\n               value=\"1\"\n               className={value === '1' ? 'selected-inner-tab' : 'inner-tab'}\n            />\n            <Tab\n               label=\"Task View\"\n               value=\"2\"\n               className={value === '2' ? 'selected-inner-tab' : 'inner-tab'}\n            />\n            <Tab\n               label=\"Objective View\"\n               value=\"3\"\n               className={value === '3' ? 'selected-inner-tab' : 'inner-tab'}\n            />\n         </TabList>\n         <TabPanel value=\"1\">\n            <MissionStudentViewTable />\n         </TabPanel>\n         <TabPanel value=\"2\">Mission Task View Table</TabPanel>\n         <TabPanel value=\"3\">Mission Objective View Table</TabPanel>\n      </TabContext>\n   );\n}\n\nexport default MissionsTab;\n","import { Theme, createStyles, Paper, makeStyles, Tab } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport TabContext from '@material-ui/lab/TabContext';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport TabList from '@material-ui/lab/TabList';\nimport { useParams } from 'react-router-dom';\nimport LearningTargetTab from './LearningTargetTab';\nimport MissionsTab from './MissionsTab';\n\nimport '../TableComponent/TableComponent.css';\nimport './StudentOverview.css';\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         display: 'flex',\n         flexWrap: 'wrap',\n         '& > *': {\n            margin: theme.spacing(0),\n            width: theme.spacing(160),\n            height: theme.spacing(60),\n         },\n      },\n      tabContainer: {\n         flexGrow: 1,\n         backgroundColor: theme.palette.background.paper,\n      },\n      selectedTab: {\n         backgroundColor: 'rgb(109, 158, 235)',\n         fontSize: '24px',\n         color: 'white',\n         fontWeight: 'bold',\n      },\n      defaultTab: {\n         backgroundColor: 'rgb(238, 238, 238)',\n         fontSize: '24px',\n         color: 'black',\n         fontWeight: 'bold',\n      },\n   })\n);\n\nfunction StudentOverview() {\n   const classes = useStyles();\n   const { className } = useParams<Record<string, string | undefined>>();\n   // const className = params.className;\n   console.log(className);\n   const [value, setValue] = useState('1');\n\n   const handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: string) => {\n      setValue(newValue);\n   };\n\n   return (\n      <div style={{ marginLeft: '5px' }}>\n         <div\n            style={{\n               color: 'white',\n               fontSize: '50px',\n               fontWeight: 'bold',\n               background:\n                  'linear-gradient(90deg, rgb(49, 119, 238) 0%, rgb(17, 61, 138) 100%) white',\n            }}\n         >\n            {className}\n         </div>\n         <div className={classes.root}>\n            <Paper className={classes.tabContainer}>\n               <TabContext value={value}>\n                  <TabList onChange={handleChange} variant=\"fullWidth\" centered>\n                     <Tab\n                        label=\"Learning Targets\"\n                        value=\"1\"\n                        className={value === '1' ? classes.selectedTab : classes.defaultTab}\n                     />\n                     <Tab\n                        label=\"Missions\"\n                        value=\"2\"\n                        className={value === '2' ? classes.selectedTab : classes.defaultTab}\n                     />\n                  </TabList>\n                  <TabPanel value=\"1\">\n                     <LearningTargetTab />\n                  </TabPanel>\n                  <TabPanel value=\"2\">\n                     <MissionsTab />\n                  </TabPanel>\n               </TabContext>\n            </Paper>\n         </div>\n      </div>\n   );\n}\n\nexport default StudentOverview;\n","import { gql, useQuery } from '@apollo/client';\nimport { QuizBlockSubmission } from '../interfaces/QuizBlockSubmission';\n\nconst LIST_QUIZBLOCK_SUBMISSIONS = gql`\n   query ListQuizBlockSubmissions {\n      quizblockSubmissions @client {\n         id\n         student\n         points\n      }\n   }\n`;\n\ntype QuizBlockSubmissionsData = {\n   quizblockSubmissions: QuizBlockSubmission[];\n};\n\nfunction useQuizBlockSubmissions() {\n   const { loading, error, data } = useQuery<QuizBlockSubmissionsData>(LIST_QUIZBLOCK_SUBMISSIONS);\n   return {\n      loading,\n      error,\n      quizblockSubmissions: data?.quizblockSubmissions,\n   };\n}\n\nexport default useQuizBlockSubmissions;\n","import { VictoryPie } from 'victory';\n\nfunction QuizBlockPie() {\n   return (\n      <VictoryPie\n         colorScale={['#347ab2', '#4baa48', '#dd191b']}\n         width={400}\n         data={[\n            { x: '80+', y: 10 },\n            { x: '60-80', y: 20 },\n            { x: 'less than 60', y: 3 },\n         ]}\n      />\n   );\n}\n\nexport default QuizBlockPie;\n","import Table from '@material-ui/core/Table';\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useHistory } from 'react-router-dom';\nimport useQuizBlockSubmissions from '../../hooks/useQuizBlockSubmissions';\nimport QuizBlockPie from './QuizBlockPie';\nimport './TaskSubmissionOverview.css';\nimport { useQuizBlockQuery } from '../../__generated__/types';\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n   createStyles({\n      head: {\n         backgroundColor: theme.palette.common.black,\n         color: theme.palette.common.white,\n      },\n      body: {\n         fontSize: 14,\n      },\n   })\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n         },\n      },\n   })\n)(TableRow);\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         display: 'flex',\n         flexWrap: 'wrap',\n         '& > *': {\n            margin: theme.spacing(1),\n            width: theme.spacing(160),\n            height: theme.spacing(60),\n         },\n      },\n      table: {\n         minWidth: 700,\n      },\n   })\n);\n\nfunction TaskSubmissionOverview() {\n   const classes = useStyles();\n   const history = useHistory();\n   const { data: quizblockQuery } = useQuizBlockQuery({\n      variables: {\n         taskId: 'ac133970e04',\n         blockId: '0984b7bf5a0',\n      },\n   });\n\n   // const { quizblock } = useQuizBlock();\n   const { loading, error, quizblockSubmissions } = useQuizBlockSubmissions();\n\n   if (loading) {\n      return <p>Loading...</p>;\n   }\n   if (error) {\n      return <p>`Error! ${error.message}`</p>;\n   }\n\n   if (!quizblockQuery?.quizblock || !quizblockSubmissions) {\n      return <></>;\n   }\n\n   const { quizblock } = quizblockQuery;\n\n   const rows: JSX.Element[] = quizblockSubmissions.map((submission) => {\n      return (\n         <StyledTableRow\n            key={submission.student}\n            style={{ cursor: 'pointer' }}\n            onClick={() => {\n               history.push('/viewTaskSubmission');\n            }}\n         >\n            <StyledTableCell component=\"th\" scope=\"row\">\n               {submission.student}\n            </StyledTableCell>\n            <StyledTableCell>{`${submission.points}/${quizblock.points}`}</StyledTableCell>\n         </StyledTableRow>\n      );\n   });\n\n   return (\n      <div className=\"task-overview-container\">\n         <div className=\"chart\">\n            <QuizBlockPie />\n         </div>\n         <div style={{ marginLeft: '5px' }}>{quizblock.title}</div>\n         <div className={classes.root}>\n            <TableContainer style={{ marginLeft: '5px' }} component={Paper}>\n               <Table className={classes.table} aria-label=\"customized table\">\n                  <TableHead>\n                     <TableRow>\n                        <StyledTableCell>Student Name</StyledTableCell>\n                        <StyledTableCell>Points</StyledTableCell>\n                     </TableRow>\n                  </TableHead>\n                  <TableBody>{rows}</TableBody>\n               </Table>\n            </TableContainer>\n         </div>\n      </div>\n   );\n}\n\nexport default TaskSubmissionOverview;\n","import { ObjectiveFieldsFragment, useObjectivesQuery } from '../../__generated__/types';\n\nfunction ObjectiveSection() {\n   const { data: objectivesQuery } = useObjectivesQuery({\n      variables: {\n         course: 'Biology',\n      },\n   });\n   if (!objectivesQuery?.objectives) {\n      return <>Learning Objectives Undefined</>;\n   }\n\n   const { objectives } = objectivesQuery;\n\n   return (\n      <div className=\"objectives\">\n         {objectives.map((objective: ObjectiveFieldsFragment) => (\n            <div className=\"objective\" key={objective.objectiveId}>\n               Learning Objective: {objective.description}\n            </div>\n         ))}\n      </div>\n   );\n}\n\nexport default ObjectiveSection;\n","import RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { Radio } from '@material-ui/core';\nimport { QuizBlockSubmission, StudentAnswer } from '../../interfaces/QuizBlockSubmission';\nimport {\n   QuizBlockQuery,\n   QuestionOption,\n   McQuestionFieldsFragment,\n   FrQuestionFieldsFragment,\n} from '../../__generated__/types';\n\nfunction renderQuestionOptions(question: McQuestionFieldsFragment, studentAnswer: StudentAnswer) {\n   const correctChoices = new Set<number>(question.answers);\n\n   return question.options.map((option: QuestionOption) => {\n      const studentChoices = new Set<number>(studentAnswer.choices);\n\n      let styleName = correctChoices.has(option.id) ? 'option-correct' : '';\n      if (studentChoices.has(option.id) && !correctChoices.has(option.id)) {\n         styleName = 'option-incorrect';\n      }\n\n      return (\n         <FormControlLabel\n            value={option.description}\n            disabled\n            className={styleName}\n            control={<Radio checked={studentChoices.has(option.id)} />}\n            label={option.description}\n         />\n      );\n   });\n}\n\ntype QuestionFieldsFragment = McQuestionFieldsFragment | FrQuestionFieldsFragment;\n\nfunction renderQuestions(\n   questions: Array<QuestionFieldsFragment>,\n   submission: QuizBlockSubmission\n) {\n   const answerMap = new Map<string, StudentAnswer>();\n   submission.studentAnswers.forEach((answer) => {\n      answerMap.set(answer.questionId, answer);\n   });\n\n   const defaultAnswer: StudentAnswer = {\n      questionId: 'question',\n      result: false,\n      choices: [0],\n   };\n\n   return questions.map((question: QuestionFieldsFragment, index: number) => {\n      // #render multiple choice question\n      if (question.__typename === 'McQuestion') {\n         const answer = answerMap.get(question.id) || defaultAnswer;\n         const feedback = answer.result ? \"That's right!\" : 'Not quite.';\n\n         return (\n            <div className=\"question\" key={question.id}>\n               <p className=\"question-desc\">\n                  <span className=\"question-index\">{index + 1}</span>\n                  {question.description}\n               </p>\n               <RadioGroup>{renderQuestionOptions(question, answer)}</RadioGroup>\n               <p className=\"feedback\">{feedback}</p>\n            </div>\n         );\n      }\n\n      return <p>Unknown Question Type `${question.__typename}`</p>;\n   });\n}\n\ntype Props = {\n   quizblockQuery: QuizBlockQuery;\n   quizblockSubmission: QuizBlockSubmission;\n};\n\nfunction SubmissionDetail({ quizblockQuery, quizblockSubmission }: Props) {\n   const { quizblock } = quizblockQuery;\n\n   return (\n      <div className=\"quizblock\">\n         <div className=\"quizblock-header\">\n            <h2>Submission Details</h2>\n            <h3 className=\"quizblock-title\">{quizblock.title}</h3>\n            <p className=\"quizblock-points\">Total Points: {quizblock.points}</p>\n            <p>Required Score: {quizblock.requiredScore}</p>\n            <p>\n               <span className=\"student-name\">Student Name:</span>\n               {quizblockSubmission.student}\n            </p>\n            <p>\n               The student got\n               <span className=\"student-points\">{quizblockSubmission.points}</span>\n               {` out of ${quizblock.points}.`}\n            </p>\n         </div>\n         <div className=\"quizblock-body\">\n            {renderQuestions(quizblock.questions, quizblockSubmission)}\n         </div>\n      </div>\n   );\n}\n\nexport default SubmissionDetail;\n","import { gql, useQuery } from '@apollo/client';\nimport { QuizBlockSubmission } from '../interfaces/QuizBlockSubmission';\n\nconst GET_QUIZBLOCK_SUBMISSION = gql`\n   query GetQuizBlockSubmission {\n      quizblockSubmission @client {\n         id\n         student\n         points\n         studentAnswers {\n            questionId\n            result\n            choices\n         }\n      }\n   }\n`;\n\ntype QuizBlockSubmissionData = {\n   quizblockSubmission: QuizBlockSubmission;\n};\n\nfunction useQuizBlockSubmission() {\n   const { loading, error, data } = useQuery<QuizBlockSubmissionData>(GET_QUIZBLOCK_SUBMISSION);\n   return {\n      loading,\n      error,\n      quizblockSubmission: data?.quizblockSubmission,\n   };\n}\n\nexport default useQuizBlockSubmission;\n","import ObjectiveSection from './ObjectiveSection';\nimport SubmissionDetail from './SubmissionDetail';\nimport useQuizBlockSubmission from '../../hooks/useQuizBlockSubmission';\nimport { useQuizBlockQuery } from '../../__generated__/types';\nimport './ViewTaskSubmission.css';\n\nfunction ViewTaskSubmission() {\n   const { data: quizBlockQuery } = useQuizBlockQuery({\n      variables: {\n         taskId: 'ac133970e04',\n         blockId: '0984b7bf5a0',\n      },\n   });\n\n   const { quizblockSubmission } = useQuizBlockSubmission();\n\n   if (!quizBlockQuery?.quizblock || !quizblockSubmission) {\n      return <></>;\n   }\n\n   return (\n      <div className=\"view-task-submission\">\n         <ObjectiveSection />\n         <SubmissionDetail\n            quizblockQuery={quizBlockQuery}\n            quizblockSubmission={quizblockSubmission}\n         />\n      </div>\n   );\n}\n\nexport default ViewTaskSubmission;\n","export default __webpack_public_path__ + \"static/media/images-1.772bc0e1.png\";","/* eslint-disable react/destructuring-assignment */\nimport { Box, LinearProgress, LinearProgressProps, Typography } from '@material-ui/core';\nimport { createStyles, withStyles, Theme } from '@material-ui/core/styles';\n\nconst BorderLinearProgress = withStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         height: 10,\n         borderRadius: 5,\n      },\n      colorPrimary: {},\n      bar: {\n         borderRadius: 5,\n         backgroundColor: '#082580',\n      },\n   })\n)(LinearProgress);\n\nfunction LinearProgressWithLabel(props: LinearProgressProps & { value: number }) {\n   const { value } = props;\n   return (\n      <Box display=\"flex\" alignItems=\"center\">\n         <Box width=\"100%\" mr={1} ml={1}>\n            <BorderLinearProgress variant=\"determinate\" {...props} />\n         </Box>\n         <Box minWidth={35}>\n            <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(value)}%`}</Typography>\n         </Box>\n      </Box>\n   );\n}\n\nexport default LinearProgressWithLabel;\n","import React, { useState } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { Link } from 'react-router-dom';\nimport LinearProgressWithLabel from './LinearProgressWithLabel';\nimport { Task } from '../../__generated__/types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         width: '100%',\n         maxWidth: 500,\n         backgroundColor: theme.palette.background.paper,\n      },\n      nested: {\n         paddingLeft: theme.spacing(4),\n      },\n      progressBar: {\n         minWidth: '150px',\n      },\n   })\n);\n\nconst PaddedDiv = styled.div`\n   padding-left: 30px;\n`;\n\nconst DoublePaddedDiv = styled.div`\n   padding-left: 40px;\n`;\n\nexport interface ObjectiveDropDownProps {\n   name: string;\n   tasks: Task[];\n}\n\n// Handles state to open and close dropdown\nfunction handleClick(\n   openObjectBool: boolean,\n   openFunction: React.Dispatch<React.SetStateAction<boolean>>\n): void {\n   openFunction(!openObjectBool);\n}\n\nexport default function TargetDropDown({ name, tasks }: ObjectiveDropDownProps) {\n   const classes = useStyles();\n   const [open, setOpen] = useState(false);\n\n   const TASK_PERCENT = 100;\n   const OBJECTIVE_PERCENT = 50;\n\n   return (\n      <List component=\"div\">\n         <PaddedDiv>\n            <ListItem\n               button\n               onClick={() => handleClick(open, setOpen)}\n               style={{\n                  border: '1px',\n                  borderColor: '#C2D2FC',\n                  borderStyle: 'solid',\n                  backgroundColor: '#E9EEFC',\n               }}\n            >\n               <ListItemText primary={name} />\n               <LinearProgressWithLabel className={classes.progressBar} value={OBJECTIVE_PERCENT} />\n               {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n         </PaddedDiv>\n         <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            {tasks.map((task: Task) => (\n               <Link to=\"/viewTask\">\n                  <List component=\"div\">\n                     <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        <DoublePaddedDiv>\n                           <ListItem\n                              button\n                              className={classes.nested}\n                              style={{\n                                 border: '1px',\n                                 borderColor: '#C2D2FC',\n                                 borderStyle: 'solid',\n                                 backgroundColor: '#E9EEFC',\n                              }}\n                           >\n                              <ListItemText primary={task.name} />\n                              <LinearProgressWithLabel\n                                 className={classes.progressBar}\n                                 value={TASK_PERCENT}\n                              />\n                           </ListItem>\n                        </DoublePaddedDiv>\n                     </div>\n                  </List>\n               </Link>\n            ))}\n         </Collapse>\n      </List>\n   );\n}\n","import React, { useState } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport LinearProgressWithLabel from './LinearProgressWithLabel';\nimport ObjectiveDropDown from './ObjectiveDropDown';\nimport { MissionSubMission } from '../../interfaces/MissionSubMission';\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         width: '100%',\n         maxWidth: 500,\n         backgroundColor: theme.palette.background.paper,\n      },\n      nested: {\n         paddingLeft: theme.spacing(4),\n      },\n      progressBar: {\n         minWidth: '150px',\n      },\n   })\n);\n\nconst PaddedDiv = styled.div`\n   padding-left: 10px;\n`;\n\nexport interface MissionDropDownProps {\n   name: string;\n   subMissions: MissionSubMission[];\n}\n\n// Handles state to open or close dropdown\nfunction handleClick(\n   openObjectBool: boolean,\n   openFunction: React.Dispatch<React.SetStateAction<boolean>>\n): void {\n   openFunction(!openObjectBool);\n}\n\nexport default function MissionDropDown({ name, subMissions }: MissionDropDownProps) {\n   const classes = useStyles();\n   const [open, setOpen] = useState(false);\n\n   const TARGET_PERCENT = 50;\n\n   return (\n      <List component=\"nav\" aria-labelledby=\"nested-list-subheader\" className={classes.root}>\n         <PaddedDiv>\n            <ListItem\n               button\n               onClick={() => handleClick(open, setOpen)}\n               style={{\n                  border: '1px',\n                  borderColor: '#C2D2FC',\n                  borderStyle: 'solid',\n                  backgroundColor: '#E9EEFC',\n               }}\n            >\n               <ListItemText primary={name} />\n               <LinearProgressWithLabel className={classes.progressBar} value={TARGET_PERCENT} />\n               {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n         </PaddedDiv>\n         <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            {subMissions.map((subMission: MissionSubMission) => (\n               <ObjectiveDropDown name={subMission.name} tasks={subMission.tasks} />\n            ))}\n         </Collapse>\n      </List>\n   );\n}\n","import { gql } from '@apollo/client';\n\nexport const GET_USERS = gql`\n   query GetUsers {\n      users: getUsers {\n         id\n         firstName\n         lastName\n      }\n   }\n`;\n\nexport const ADD_USER = gql`\n   mutation AddUser($user: UserInput!) {\n      addUser(user: $user) {\n         firstName\n         lastName\n      }\n   }\n`;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { useQuery } from '@apollo/client';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport styled from 'styled-components';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport StudentPicture from '../../assets/images/images-1.png';\nimport { User } from '../../interfaces/User';\nimport LinearProgressWithLabel from '../LinearProgressWithLabel/LinearProgressWithLabel';\nimport MissionDropDown from '../LinearProgressWithLabel/MissionDropDown';\nimport { MissionSubMission } from '../../interfaces/MissionSubMission';\nimport { GET_USERS } from '../../queries/user-queries';\n\nconst StudentDiv = styled.div`\n   height: 275px;\n   width: 100%;\n   font-size: 24pt;\n   display: flex;\n   justify-content: flex-start;\n   align-items: left;\n`;\n\nconst StudentNameDiv = styled.div`\n   height: 50px;\n   width: 100%;\n   font-size: 24pt;\n   display: flex;\n   justify-content: flex-start;\n   align-items: left;\n`;\n\nconst StudentImageDiv = styled.div`\n   height: 200px;\n   width: 100%;\n   font-size: 24pt;\n   display: flex;\n   justify-content: flex-start;\n   align-items: left;\n`;\n\nconst FieldTitleDiv = styled.div`\n   height: 30px;\n   width: 100%;\n   background-color: #99d6ff;\n   align-items: center;\n   display: flex;\n   padding: 5px;\n   border: 1px;\n   border-color: #1A8BDE;\n   border-style: solid;\n}\n`;\n\nconst RowDiv = styled.div`\n   width: 100%;\n   display: flex;\n   background-color: white;\n`;\n\nconst ColumnDiv = styled.div`\n   width: 100%;\n   flex-direction: column;\n   padding: 5px;\n`;\n\nconst PaddedDiv = styled.div`\n   padding-left: 5px;\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         width: '100%',\n         maxWidth: 500,\n         backgroundColor: theme.palette.background.paper,\n      },\n      nested: {\n         paddingLeft: theme.spacing(4),\n      },\n      progressBar: {\n         minWidth: '150px',\n      },\n   })\n);\n\nfunction SingleStudentOverview() {\n   const { data: users } = useQuery<User>(GET_USERS);\n   // const { userId } = useParams();\n   const classes = useStyles();\n   const history = useHistory();\n   console.log(users);\n\n   const COMP_TASK_PERCENT = 100;\n\n   const test: any = history.location.state;\n   const inputUser: User = {\n      id: test?.id,\n      firstName: test?.firstName,\n      lastName: test?.lastName,\n   };\n\n   const missions = [\n      {\n         id: '123',\n         name: 'Mission 1',\n         description: 'mission1 for you',\n         subMissions: [\n            {\n               id: '345',\n               name: 'Sub-Mission 1',\n               description: 'SubMission1 description',\n               tasks: [\n                  {\n                     id: 'string',\n                     name: 'Task 1',\n                     instructions: 'string',\n                     points: 3,\n                     parentMissionId: 'string',\n                     parentMissionIndex: 4,\n                     pages: [],\n                     requirements: [],\n                  },\n                  {\n                     id: 'string2',\n                     name: 'Task 2',\n                     instructions: 'string2',\n                     points: 3,\n                     parentMissionId: 'string2',\n                     parentMissionIndex: 4,\n                     pages: [],\n                     requirements: [],\n                  },\n               ],\n            },\n         ],\n      },\n   ];\n\n   const goals = [\n      {\n         name: 'Goal 1',\n      },\n      {\n         name: 'Goal 2',\n      },\n      {\n         name: 'Goal 3',\n      },\n   ];\n\n   const compGoals = [\n      {\n         name: 'Goal 0',\n      },\n      {\n         name: 'Goal 0.1',\n      },\n      {\n         name: 'Goal 0.2',\n      },\n   ];\n\n   return (\n      <div style={{ marginLeft: '5px', marginRight: '5px', backgroundColor: '#DAEFFE' }}>\n         <StudentDiv>\n            <ColumnDiv>\n               <StudentNameDiv>\n                  {inputUser.firstName} {inputUser.lastName}\n               </StudentNameDiv>\n               <StudentImageDiv>\n                  <img src={StudentPicture} alt=\"\" style={{ width: 200, height: 200 }} />\n               </StudentImageDiv>\n            </ColumnDiv>\n            <ColumnDiv>\n               <Link\n                  to={{\n                     pathname: '/singleStudentMasteryOverview',\n                  }}\n               >\n                  <Button variant=\"info\" size=\"lg\">\n                     Click to View Mastery Progress\n                  </Button>\n               </Link>\n            </ColumnDiv>\n         </StudentDiv>\n         <RowDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Current Missions</FieldTitleDiv>\n               {missions.map((mission) => (\n                  <MissionDropDown name={mission.name} subMissions={mission.subMissions as any[]} />\n               ))}\n            </ColumnDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Current Goals</FieldTitleDiv>\n               {goals.map((goal) => (\n                  <List>\n                     <PaddedDiv>\n                        <ListItem\n                           button\n                           className={classes.nested}\n                           style={{\n                              border: '1px',\n                              borderColor: '#C2D2FC',\n                              borderStyle: 'solid',\n                              backgroundColor: '#E9EEFC',\n                           }}\n                        >\n                           <ListItemText primary={goal.name} />\n                           <LinearProgressWithLabel\n                              className={classes.progressBar}\n                              value={COMP_TASK_PERCENT}\n                           />\n                        </ListItem>\n                     </PaddedDiv>\n                  </List>\n               ))}\n            </ColumnDiv>\n         </RowDiv>\n         <RowDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Completed Missions</FieldTitleDiv>\n               {missions.map((compMission) => (\n                  <MissionDropDown\n                     name={compMission.name}\n                     subMissions={compMission.subMissions as any[]}\n                  />\n               ))}\n            </ColumnDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Completed Goals</FieldTitleDiv>\n               {compGoals.map((compGoal) => (\n                  <List>\n                     <PaddedDiv>\n                        <ListItem\n                           button\n                           className={classes.nested}\n                           style={{\n                              border: '1px',\n                              borderColor: '#C2D2FC',\n                              borderStyle: 'solid',\n                              backgroundColor: '#E9EEFC',\n                           }}\n                        >\n                           <ListItemText primary={compGoal.name} />\n                           <LinearProgressWithLabel\n                              className={classes.progressBar}\n                              value={COMP_TASK_PERCENT}\n                           />\n                        </ListItem>\n                     </PaddedDiv>\n                  </List>\n               ))}\n            </ColumnDiv>\n         </RowDiv>\n      </div>\n   );\n}\n\nexport default SingleStudentOverview;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport React, { useState } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport LinearProgressWithLabel from './LinearProgressWithLabel';\nimport ObjectiveDropDown from './ObjectiveDropDown';\nimport { Objective } from '../../__generated__/types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         width: '100%',\n         maxWidth: 500,\n         backgroundColor: theme.palette.background.paper,\n      },\n      nested: {\n         paddingLeft: theme.spacing(4),\n      },\n      progressBar: {\n         minWidth: '150px',\n      },\n   })\n);\n\nconst PaddedDiv = styled.div`\n   padding-left: 10px;\n`;\n\nexport interface TargetDropDownProps {\n   name: string;\n   learningObjectives: Objective[];\n}\n\n// Handles state to open or close dropdown\nfunction handleClick(\n   openObjectBool: boolean,\n   openFunction: React.Dispatch<React.SetStateAction<boolean>>\n): void {\n   openFunction(!openObjectBool);\n}\n\nexport default function TargetDropDown({ name, learningObjectives }: TargetDropDownProps) {\n   const classes = useStyles();\n   const [open, setOpen] = useState(false);\n\n   const TARGET_PERCENT = 50;\n\n   return (\n      <List component=\"nav\" aria-labelledby=\"nested-list-subheader\" className={classes.root}>\n         <PaddedDiv>\n            <ListItem\n               button\n               onClick={() => handleClick(open, setOpen)}\n               style={{\n                  border: '1px',\n                  borderColor: '#C2D2FC',\n                  borderStyle: 'solid',\n                  backgroundColor: '#E9EEFC',\n               }}\n            >\n               <ListItemText primary={name} />\n               <LinearProgressWithLabel className={classes.progressBar} value={TARGET_PERCENT} />\n               {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n         </PaddedDiv>\n         <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            {learningObjectives.map((objective: Objective) => (\n               <ObjectiveDropDown name={objective.objectiveName} tasks={objective.tasks || []} />\n            ))}\n         </Collapse>\n      </List>\n   );\n}\n","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport styled from 'styled-components';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport StudentPicture from '../../assets/images/images-1.png';\nimport LinearProgressWithLabel from '../LinearProgressWithLabel/LinearProgressWithLabel';\nimport TargetDropDown from '../LinearProgressWithLabel/TargetDropDown';\nimport { Objective } from '../../__generated__/types';\nimport { User } from '../../interfaces/User';\n\nconst StudentDiv = styled.div`\n   height: 275px;\n   width: 100%;\n   font-size: 24pt;\n   display: flex;\n   justify-content: flex-start;\n   align-items: left;\n`;\n\nconst StudentNameDiv = styled.div`\n   height: 50px;\n   width: 100%;\n   font-size: 24pt;\n   display: flex;\n   justify-content: flex-start;\n   align-items: left;\n`;\n\nconst StudentImageDiv = styled.div`\n   height: 200px;\n   width: 100%;\n   font-size: 24pt;\n   display: flex;\n   justify-content: flex-start;\n   align-items: left;\n`;\n\nconst FieldTitleDiv = styled.div`\n   height: 30px;\n   width: 100%;\n   background-color: #99d6ff;\n   align-items: center;\n   display: flex;\n   padding: 5px;\n   border: 1px;\n   border-color: #1A8BDE;\n   border-style: solid;\n}\n`;\n\nconst RowDiv = styled.div`\n   width: 100%;\n   display: flex;\n   background-color: white;\n`;\n\nconst ColumnDiv = styled.div`\n   width: 100%;\n   flex-direction: column;\n   padding: 5px;\n`;\n\nconst PaddedDiv = styled.div`\n   padding-left: 5px;\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n   createStyles({\n      root: {\n         width: '100%',\n         maxWidth: 500,\n         backgroundColor: theme.palette.background.paper,\n      },\n      nested: {\n         paddingLeft: theme.spacing(4),\n      },\n      progressBar: {\n         minWidth: '150px',\n      },\n   })\n);\n\nexport interface LearningTarget {\n   name: string;\n   learningObjectives: Objective[];\n}\n\nexport default function SingleStudentMasteryOveriew() {\n   const classes = useStyles();\n   const history = useHistory();\n   // const test: any = props.location.state;\n   // const inputUser: User = {\n   //    id: test?.id,\n   //    firstName: test?.firstName,\n   //    lastName: test?.lastName,\n   // };\n   // const inputUser = history.location.state;\n\n   const learningTargets = [\n      {\n         name: 'Target 1',\n         learningObjectives: [\n            {\n               objectiveName: 'Objective 1',\n               tasks: [\n                  {\n                     name: 'Task 1',\n                  },\n                  {\n                     name: 'Task 2',\n                  },\n               ],\n            },\n            {\n               objectiveName: 'Objective 2',\n               tasks: [\n                  {\n                     name: 'Task 1',\n                  },\n                  {\n                     name: 'Task 2',\n                  },\n               ],\n            },\n         ],\n      },\n      {\n         name: 'Target 2',\n         learningObjectives: [\n            {\n               objectiveName: 'Objective 1',\n               tasks: [\n                  {\n                     name: 'Task 1',\n                  },\n                  {\n                     name: 'Task 2',\n                  },\n               ],\n            },\n            {\n               objectiveName: 'Objective 2',\n               tasks: [\n                  {\n                     name: 'Task 1',\n                  },\n                  {\n                     name: 'Task 2',\n                  },\n               ],\n            },\n         ],\n      },\n   ];\n\n   const goals = [\n      {\n         name: 'Goal 1',\n      },\n      {\n         name: 'Goal 2',\n      },\n      {\n         name: 'Goal 3',\n      },\n   ];\n\n   const compGoals = [\n      {\n         name: 'Goal 0',\n      },\n      {\n         name: 'Goal 0.1',\n      },\n      {\n         name: 'Goal 0.2',\n      },\n   ];\n\n   const compLearningTargets = [\n      {\n         name: 'Target 0',\n         compLearningObjectives: [\n            {\n               objectiveName: 'Objective 1',\n               tasks: [\n                  {\n                     name: 'Task 1',\n                  },\n                  {\n                     name: 'Task 2A',\n                  },\n               ],\n            },\n         ],\n      },\n      {\n         name: 'Target 0.5',\n         compLearningObjectives: [\n            {\n               objectiveName: 'Objective 1',\n               tasks: [\n                  {\n                     name: 'Task 1',\n                  },\n                  {\n                     name: 'Task 2A',\n                  },\n               ],\n            },\n         ],\n      },\n   ];\n\n   const COMP_TASK_PERCENT = 100;\n\n   return (\n      <div style={{ marginLeft: '5px', marginRight: '5px', backgroundColor: '#DAEFFE' }}>\n         <StudentDiv>\n            <ColumnDiv>\n               <StudentNameDiv>\n                  {/* {inputUser.firstName} {inputUser.lastName} */} Bob Jones\n               </StudentNameDiv>\n               <StudentImageDiv>\n                  <img src={StudentPicture} alt=\"\" style={{ width: 200, height: 200 }} />\n               </StudentImageDiv>\n            </ColumnDiv>\n            <ColumnDiv>\n               <Link to=\"singleStudentOverview\">\n                  <Button variant=\"info\" size=\"lg\">\n                     Click for Mission Progress\n                  </Button>\n               </Link>\n            </ColumnDiv>\n         </StudentDiv>\n         <RowDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Current Targets</FieldTitleDiv>\n               {learningTargets.map((target) => (\n                  <TargetDropDown\n                     name={target.name}\n                     learningObjectives={target.learningObjectives as Objective[]}\n                  />\n               ))}\n            </ColumnDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Current Goals</FieldTitleDiv>\n               {goals.map((goal) => (\n                  <List>\n                     <PaddedDiv>\n                        <ListItem\n                           button\n                           className={classes.nested}\n                           style={{\n                              border: '1px',\n                              borderColor: '#C2D2FC',\n                              borderStyle: 'solid',\n                              backgroundColor: '#E9EEFC',\n                           }}\n                        >\n                           <ListItemText primary={goal.name} />\n                           <LinearProgressWithLabel\n                              className={classes.progressBar}\n                              value={COMP_TASK_PERCENT}\n                           />\n                        </ListItem>\n                     </PaddedDiv>\n                  </List>\n               ))}\n            </ColumnDiv>\n         </RowDiv>\n         <RowDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Completed Targets</FieldTitleDiv>\n               {compLearningTargets.map((compTarget) => (\n                  <TargetDropDown\n                     name={compTarget.name}\n                     learningObjectives={compTarget.compLearningObjectives as any[]}\n                  />\n               ))}\n            </ColumnDiv>\n            <ColumnDiv>\n               <FieldTitleDiv>Completed Goals</FieldTitleDiv>\n               {compGoals.map((compGoal) => (\n                  <List>\n                     <PaddedDiv>\n                        <ListItem\n                           button\n                           className={classes.nested}\n                           style={{\n                              border: '1px',\n                              borderColor: '#C2D2FC',\n                              borderStyle: 'solid',\n                              backgroundColor: '#E9EEFC',\n                           }}\n                        >\n                           <ListItemText primary={compGoal.name} />\n                           <LinearProgressWithLabel\n                              className={classes.progressBar}\n                              value={COMP_TASK_PERCENT}\n                           />\n                        </ListItem>\n                     </PaddedDiv>\n                  </List>\n               ))}\n            </ColumnDiv>\n         </RowDiv>\n      </div>\n   );\n}\n","import { faCaretLeft, faHandPaper } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Navbar, Nav, Form, Button, NavDropdown } from 'react-bootstrap';\nimport './TaskNavbar.css';\n\nfunction TaskNavbar() {\n   return (\n      <Navbar collapseOnSelect expand=\"sm\" bg=\"primary\" variant=\"light\">\n         <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n         <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"container-fluid\">\n               <Form inline>\n                  <Button className=\"rounded-circle btn-light\" type=\"submit\" href=\"/\">\n                     <FontAwesomeIcon icon={faCaretLeft} />\n                  </Button>\n               </Form>\n               <Form inline className=\"ml-auto\">\n                  <Button type=\"submit\" className=\"rounded-circle btn-light\">\n                     <FontAwesomeIcon icon={faHandPaper} />\n                  </Button>\n               </Form>\n               <NavDropdown title=\"Task Rubric\" id=\"rubric-dropdown\" className=\"ml-2\">\n                  <NavDropdown.Item href=\"\">Task Rubric</NavDropdown.Item>\n                  <Form inline>\n                     <Button type=\"submit\">Submit Task</Button>\n                  </Form>\n               </NavDropdown>\n            </Nav>\n         </Navbar.Collapse>\n      </Navbar>\n   );\n}\n\nexport default TaskNavbar;\n","import { faCaretLeft, faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useState } from 'react';\nimport { ProgressBar, Button } from 'react-bootstrap';\nimport { GetTaskByIdQuery, Task } from '../../../__generated__/types';\nimport './TaskProgress.css';\n\nfunction blockComplete(\n   progress: number,\n   block: number,\n   setProgress: (newProgress: number) => void\n) {\n   setProgress(progress + block);\n}\n\nfunction handlePageChange(\n   page: number,\n   changeDir: number,\n   setPage: (pageNumber: number) => void,\n   maxPage: number,\n   setProgress: (progress: number) => void\n) {\n   setPage(page + changeDir);\n   if ((page === 0 && changeDir < 0) || (page === maxPage && changeDir > 0)) {\n      console.log(maxPage);\n      setPage(page);\n   } else {\n      console.log('right');\n      setPage(page + changeDir);\n      setProgress((page + 1) / (maxPage + 1));\n   }\n}\n\nfunction TaskProgress({\n   taskInformation,\n   setPage,\n   page,\n   maxPage,\n}: {\n   taskInformation: GetTaskByIdQuery;\n   setPage: (pageNumber: number) => void;\n   page: number;\n   maxPage: number;\n}) {\n   const [progress, setProgress] = useState((page + 1) / (maxPage + 1));\n\n   return (\n      <div className=\"container-fluid\">\n         <div className=\"row py-3\">\n            <div className=\"col-12 justifyCenter\">\n               <h1>{taskInformation.task.name}</h1>\n            </div>\n         </div>\n         <div className=\"row py-3 m-auto\">\n            <div className=\"col-md-3 justifyCenter\">\n               <Button\n                  className=\"rounded-circle btn-primary\"\n                  type=\"submit\"\n                  onClick={() => handlePageChange(page, -1, setPage, maxPage, setProgress)}\n               >\n                  <FontAwesomeIcon icon={faCaretLeft} />\n               </Button>\n            </div>\n            <div className=\"col-md-6 justifyCenter\">\n               <ProgressBar now={progress} />\n            </div>\n            <div className=\"col-md-3 justifyCenter\">\n               <Button\n                  className=\"rounded-circle btn-primary\"\n                  type=\"submit\"\n                  onClick={() => handlePageChange(page, 1, setPage, maxPage, setProgress)}\n               >\n                  <FontAwesomeIcon icon={faCaretRight} />\n               </Button>\n            </div>\n         </div>\n      </div>\n   );\n}\n\nexport default TaskProgress;\n","import '../TaskBlock.css';\n\nfunction ImageBlock({ title, contents }: { title: string; contents: string }) {\n   return (\n      <div className=\"row\">\n         <div className=\"col-md-12 my-2 p-3\">\n            <h2 className=\"text-left\">\n               <b>{title || 'N/A'}</b>\n            </h2>\n            {contents ? (\n               <div className=\"container\" id=\"img-container\">\n                  <img src={contents} alt={contents} className=\"img-fluid\" />\n               </div>\n            ) : (\n               'N/A'\n            )}\n         </div>\n      </div>\n   );\n}\n\nexport default ImageBlock;\n","import '../TaskBlock.css';\nimport { Maybe } from '../../../__generated__/types';\n\nfunction TextBlock({ title, contents }: { title: string; contents: Maybe<string> }) {\n   return (\n      <div className=\"row\">\n         <div className=\"col-md-12 justifyCenter my-2 p-3\">\n            <h2 className=\"text-left\">\n               <b>{title}</b>\n            </h2>\n            <p className=\"text-left\">{contents || 'N/A'}</p>\n         </div>\n      </div>\n   );\n}\n\nexport default TextBlock;\n","import YouTube from 'react-youtube';\nimport '../TaskBlock.css';\n\nconst opts = {\n   height: '390',\n   width: '640',\n   playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n   },\n};\n\nfunction onReady(event: any) {\n   // access to player in all event handlers via event.target\n   event.target.pauseVideo();\n}\n\nfunction VideoBlock({ title, contents }: { title: string; contents: string }) {\n   return (\n      <div className=\"row\">\n         <div className=\"col-md-12 justifyCenter my-2 p-3\">\n            <h2 className=\"text-left\">\n               <b>{title}</b>\n            </h2>\n            <div className=\"container\">\n               <YouTube videoId={contents} onReady={onReady} />\n            </div>\n         </div>\n      </div>\n   );\n}\n\nexport default VideoBlock;\n","import RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport { Radio } from '@material-ui/core';\nimport {\n   QuestionOption,\n   McQuestionFieldsFragment,\n   FrQuestionFieldsFragment,\n} from '../../../__generated__/types';\nimport '../TaskBlock.css';\n\nfunction renderQuestionOptions(question: McQuestionFieldsFragment) {\n   const correctChoices = new Set<number>(question.answers);\n\n   return question.options.map((option: QuestionOption) => {\n      const styleName = correctChoices.has(option.id) ? 'option-correct' : '';\n\n      return (\n         <FormControlLabel\n            value={option.description}\n            disabled\n            className={styleName}\n            control={<Radio />}\n            label={option.description}\n            key={option.id}\n         />\n      );\n   });\n}\n\ntype QuestionFieldsFragment = McQuestionFieldsFragment | FrQuestionFieldsFragment;\n\nfunction renderQuestions(questions: Array<QuestionFieldsFragment>) {\n   return questions.map((question: QuestionFieldsFragment, index: number) => {\n      // #render multiple choice question\n      switch (question.__typename) {\n         case 'FrQuestion': {\n            return (\n               <div className=\"col-12\" key={question.id}>\n                  <p className=\"question-desc\">\n                     <span className=\"question-index\">{index + 1}</span>\n                     {question.description}\n                  </p>\n                  <InputGroup className=\"mb-3\">\n                     <FormControl aria-label=\"Type your answer here.\" />\n                  </InputGroup>\n               </div>\n            );\n         }\n         case 'McQuestion': {\n            const mcQ = question;\n            return (\n               <div className=\"col-12\" key={mcQ.id}>\n                  <p className=\"question-desc\">\n                     <span className=\"question-index\">{index + 1}</span>\n                     {mcQ.description}\n                  </p>\n                  <RadioGroup>{renderQuestionOptions(mcQ)}</RadioGroup>\n               </div>\n            );\n         }\n         default:\n            return <></>;\n      }\n   });\n}\n\nfunction QuizBlock({\n   title,\n   questions,\n   reqScore,\n}: {\n   title: string;\n   questions: QuestionFieldsFragment[];\n   reqScore: number;\n}) {\n   return (\n      <div className=\"row\">\n         <div className=\"col-md-12 py-3 my-2\">\n            <h2 className=\"text-left\">\n               <b>{title}</b>\n            </h2>\n            <p className=\"text-left\">Required Score: {reqScore}</p>\n            <div className=\"row\">{renderQuestions(questions)}</div>\n         </div>\n      </div>\n   );\n}\n\nexport default QuizBlock;\n","import '../TaskBlock.css';\n\nfunction IntroBlock({ instructions }: { instructions: string }) {\n   return (\n      <div className=\"row\">\n         <div className=\"col-md-12 my-2 p-3\">\n            <h2 className=\"text-left\">\n               <b>Introduction</b>\n            </h2>\n            <p className=\"text-left\">{instructions || 'No instructions given.'}</p>\n         </div>\n      </div>\n   );\n}\n\nexport default IntroBlock;\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport {\n   GetTaskByIdQuery,\n   ImageBlockFieldsFragment,\n   PageFieldsFragment,\n   QuizBlockFieldsFragment,\n   TextBlockFieldsFragment,\n   VideoBlockFieldsFragment,\n} from '../../../__generated__/types';\nimport ImageBlock from '../../../Components/TaskBlocks/ImageBlock/ImageBlock';\nimport TextBlock from '../../../Components/TaskBlocks/TextBlock/TextBlock';\nimport VideoBlock from '../../../Components/TaskBlocks/VideoBlock/VideoBlock';\nimport QuizBlock from '../../../Components/TaskBlocks/QuizBlock/QuizBlock';\nimport IntroBlock from '../../../Components/TaskBlocks/IntroBlock/IntroBlock';\n\nfunction BlockPageHandler({\n   taskInformation,\n   page,\n}: {\n   taskInformation: GetTaskByIdQuery;\n   page: number;\n}) {\n   const pageBlocks = taskInformation.task.pages[page].blocks;\n\n   type TaskBlock =\n      | ImageBlockFieldsFragment\n      | TextBlockFieldsFragment\n      | QuizBlockFieldsFragment\n      | VideoBlockFieldsFragment;\n\n   const blockList = pageBlocks.map((block: TaskBlock, index: number) => {\n      switch (block.__typename) {\n         case 'ImageBlock': {\n            const iBlock = block as ImageBlockFieldsFragment;\n            return <ImageBlock title=\"PLACEHOLDER\" contents={iBlock.imageUrl} key={index} />;\n         }\n         case 'TextBlock': {\n            const tBlock = block as TextBlockFieldsFragment;\n            return <TextBlock title={tBlock.title} contents={tBlock.contents} key={index} />;\n         }\n         case 'QuizBlock': {\n            const qBlock = block as QuizBlockFieldsFragment;\n            return (\n               <QuizBlock\n                  title={qBlock.title}\n                  questions={qBlock.questions}\n                  reqScore={qBlock.requiredScore}\n                  key={index}\n               />\n            );\n         }\n         case 'VideoBlock': {\n            const vBlock = block as VideoBlockFieldsFragment;\n            return <VideoBlock title={vBlock.title} contents={vBlock.videoUrl} key={index} />;\n         }\n         default:\n            return <></>;\n      }\n   });\n\n   return (\n      <div className=\"container-fluid\">\n         <div className=\"row\">\n            <div className=\"col-10 mx-auto\">\n               <IntroBlock instructions={taskInformation.task.instructions} />\n               {blockList}\n            </div>\n         </div>\n      </div>\n   );\n}\n\nexport default BlockPageHandler;\n","import { useState } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { useGetTaskByIdQuery } from '../../__generated__/types';\nimport TaskNavbar from './TaskNavbar/TaskNavbar';\nimport TaskProgress from './TaskProgress/TaskProgress';\nimport BlockPageHandler from './BlockPageHandler/BlockPageHandler';\n\nfunction TaskView({ taskId }: { taskId: string }) {\n   const { data: taskByIdQuery } = useGetTaskByIdQuery({\n      variables: { taskId },\n   });\n\n   const [page, setPage] = useState(0);\n\n   const maxPage: number =\n      taskByIdQuery === undefined || taskByIdQuery.task.pages === undefined\n         ? 0\n         : taskByIdQuery.task.pages.length - 1;\n\n   return (\n      <div>\n         <TaskNavbar />\n         {taskByIdQuery ? (\n            <div>\n               <TaskProgress\n                  taskInformation={taskByIdQuery}\n                  setPage={setPage}\n                  page={page}\n                  maxPage={maxPage}\n               />\n               <BlockPageHandler taskInformation={taskByIdQuery} page={page} />\n            </div>\n         ) : (\n            <Alert variant=\"danger\">\n               Unable to load specified task. Please try refreshing the page.\n            </Alert>\n         )}\n      </div>\n   );\n}\n\nexport default TaskView;\n","import { Switch, Route } from 'react-router-dom';\nimport CreateCourseDialog from '../CreateCourseDialog/CreateCourseDialog';\nimport Dashboard from '../Dashboard/Dashboard';\nimport StudentOverview from '../StudentOverview/StudentOverview';\nimport TaskSubmissionOverview from '../TaskSubmissionOverview';\nimport ViewTaskSubmission from '../ViewTaskSubmission';\nimport SingleStudentOverview from '../SingleStudentOverview/SingleStudentOverview';\nimport SingleStudentMasteryOverview from '../SingleStudentMasteryOverview/SingleStudentMasteryOverview';\n\nimport './Content.css';\nimport TaskView from '../../Screens/TaskView/TaskView';\n\nexport default function Content() {\n   return (\n      <div className=\"content\">\n         <Switch>\n            <Route path=\"/addNewCourse\">\n               <CreateCourseDialog />\n            </Route>\n            <Route path=\"/taskSubmissionOverview\">\n               <TaskSubmissionOverview />\n            </Route>\n            <Route path=\"/viewTaskSubmission\">\n               <ViewTaskSubmission />\n            </Route>\n            <Route path=\"/studentOverview/:className\">\n               <StudentOverview />\n            </Route>\n            <Route path=\"/singleStudentOverview\">\n               <SingleStudentOverview />\n            </Route>\n            <Route path=\"/singleStudentMasteryOverview\">\n               <SingleStudentMasteryOverview />\n            </Route>\n            <Route path=\"/viewTask\">\n               <TaskView taskId=\"90e0c730e56\" />\n            </Route>\n            <Route path=\"/\">\n               <Dashboard />\n            </Route>\n         </Switch>\n      </div>\n   );\n}\n","import { Auth } from 'aws-amplify';\nimport { Navbar, Nav, Form, Button, NavDropdown } from 'react-bootstrap';\nimport './Navigation.css';\n\nexport default function Navigation() {\n   return (\n      <Navbar collapseOnSelect expand=\"sm\" bg=\"dark\" variant=\"dark\">\n         <Navbar.Brand href=\"/\">Flipt(Ed)</Navbar.Brand>\n         <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n         <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"container-fluid\">\n               <Nav.Link href=\"/\">Dashboard</Nav.Link>\n               <Nav.Link href=\"/viewTask\">View Test Task</Nav.Link>\n               <Nav.Link href=\"/addNewCourse\">Create Course</Nav.Link>\n               <NavDropdown title=\"Dev Screens\" className=\"ml-auto\" id=\"dev-dropdown\">\n                  <NavDropdown.Item href=\"/addNewCourse\">Create Course</NavDropdown.Item>\n                  <NavDropdown.Item href=\"/addTaskSubmission\">Submit Task</NavDropdown.Item>\n                  <NavDropdown.Item href=\"/taskSubmissionOverview\">\n                     Task Submission Overview\n                  </NavDropdown.Item>\n                  <NavDropdown.Item href=\"/viewTaskSubmission\">\n                     View Task Submission\n                  </NavDropdown.Item>\n                  <NavDropdown.Item href=\"/studentOverview\">Student Overview</NavDropdown.Item>\n                  <NavDropdown.Item href=\"/singleStudentOverview\">\n                     Single Student Overview\n                  </NavDropdown.Item>\n                  <NavDropdown.Item href=\"/singleStudentMasteryOverview\">\n                     Single Student Mastery Overview\n                  </NavDropdown.Item>\n               </NavDropdown>\n               <Form inline>\n                  <Button className=\"ml-auto\" type=\"submit\" onClick={() => Auth.signOut()}>\n                     Log Out\n                  </Button>\n               </Form>\n            </Nav>\n         </Navbar.Collapse>\n      </Navbar>\n   );\n}\n","import { Auth, Hub } from 'aws-amplify';\nimport { useState, useEffect } from 'react';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport Sidebar from '../Components/Sidebar';\nimport Content from '../Components/Content';\nimport Navigation from '../Navigation/Navigation';\nimport './App.css';\n\n// Entry point of the Flitped App\nfunction App() {\n   const [, setUser] = useState(null);\n\n   function storeToken(): void {\n      Auth.currentSession()\n         .then((userSession) => {\n            const accessToken = userSession.getAccessToken();\n            const jwt = accessToken.getJwtToken();\n            localStorage.setItem('accessToken', JSON.stringify(accessToken));\n            localStorage.setItem('jwt', jwt);\n\n            return Auth.currentAuthenticatedUser();\n         })\n         .then((authUser) => {\n            setUser(authUser);\n         })\n         .catch(() => console.log('Not signed in'));\n   }\n\n   useEffect(() => {\n      Hub.listen('auth', ({ payload: { event, data } }) => {\n         switch (event) {\n            case 'signIn':\n            case 'cognitoHostedUI':\n               storeToken();\n               break;\n            case 'signOut':\n               setUser(null);\n               break;\n            case 'signIn_failure':\n            case 'cognitoHostedUI_failure':\n               console.log('Sign in failure', data);\n               break;\n            default:\n               break;\n         }\n      });\n\n      storeToken();\n   }, []);\n\n   return (\n      <div className=\"App\">\n         <Navigation />\n         <div className=\"main container-full\">\n            <div className=\"row\">\n               <div className=\"sidebar-container col-md-2\">\n                  <Sidebar />\n               </div>\n               <div className=\"content-container col-md-10\">\n                  <Content />\n               </div>\n            </div>\n         </div>\n      </div>\n   );\n}\n\nexport default withAuthenticator(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n   if (onPerfEntry && onPerfEntry instanceof Function) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n         getCLS(onPerfEntry);\n         getFID(onPerfEntry);\n         getFCP(onPerfEntry);\n         getLCP(onPerfEntry);\n         getTTFB(onPerfEntry);\n      });\n   }\n};\n\nexport default reportWebVitals;\n","type Environment = {\n   uri: string;\n};\n\nlet uri: string = process.env.REACT_APP_URI as string;\n\nif (process.env.NODE_ENV === 'production') {\n   uri = process.env.REACT_APP_URI as string;\n}\n\nexport const environment: Environment = {\n   uri,\n};\n","import { makeVar } from '@apollo/client';\nimport { QuizBlockSubmission } from '../interfaces/QuizBlockSubmission';\nimport {\n   Answer,\n   FrQuestion,\n   ImageBlock,\n   McQuestion,\n   Page,\n   Question,\n   QuestionAndAnswer,\n   QuestionOption,\n   QuizBlock,\n   RubricRequirement,\n   Task,\n   TaskBlock,\n   TaskSubmissionResult,\n   TextBlock,\n   VideoBlock,\n} from '../__generated__/types';\n\nconst quizblockSubmissions: QuizBlockSubmission[] = [\n   {\n      id: 'a9c8e50acae',\n      student: 'Tyrion Lannister',\n      points: 100,\n      studentAnswers: [],\n   },\n   {\n      id: 'a9c8e50aca1',\n      student: 'Gregor Clegane',\n      points: 100,\n      studentAnswers: [],\n   },\n   {\n      id: 'a9c8e50aca2',\n      student: 'Lancel Lannister ',\n      points: 100,\n      studentAnswers: [],\n   },\n];\n\nconst quizblockSubmission: QuizBlockSubmission = {\n   id: 'submission1',\n   student: 'Tyrion Lannister',\n   points: 100,\n   studentAnswers: [\n      {\n         questionId: 'question0',\n         result: true,\n         choices: [1],\n      },\n      {\n         questionId: 'question1',\n         result: false,\n         choices: [2],\n      },\n      {\n         questionId: 'question2',\n         result: true,\n         choices: [2],\n      },\n   ],\n};\n\nconst mockTextBlock: TextBlock = {\n   title: 'How they disappeared',\n   blockId: 'fakeblockidtext',\n   pageIndex: 0,\n   blockIndex: 0,\n   contents: 'They were taken out by a large meteor!',\n};\n\nconst mockImageBlock: ImageBlock = {\n   title: 'Picture of a Velociraptor',\n   blockId: 'fakeblockidimage',\n   pageIndex: 0,\n   blockIndex: 1,\n   imageUrl: 'https://google.com/',\n};\n\nconst mockVideoBlock: VideoBlock = {\n   title: 'T-Rex being murked!',\n   blockId: 'fakeblockidvideo',\n   pageIndex: 1,\n   blockIndex: 0,\n   videoUrl: 'https://youtube.com',\n};\n\nconst mockOptionOne: QuestionOption = {\n   id: 0,\n   description: 'Webrew',\n};\n\nconst mockOptionTwo: QuestionOption = {\n   id: 1,\n   description: 'Ambiguous Android',\n};\n\nconst mockOptionThree: QuestionOption = {\n   id: 2,\n   description: 'Hydro',\n};\n\nconst mockOptionFour: QuestionOption = {\n   id: 3,\n   description: 'All of us!',\n};\n\nconst mockOptions: QuestionOption[] = [\n   mockOptionOne,\n   mockOptionTwo,\n   mockOptionThree,\n   mockOptionFour,\n];\n\nconst mockAnswers: number[] = [3];\n\nconst mockQOne: McQuestion = {\n   id: 'fakemcqid',\n   description: 'Which team is the best?',\n   points: 50,\n   options: mockOptions,\n   answers: mockAnswers,\n};\n\nconst mockQTwo: FrQuestion = {\n   id: 'fakefrqtwo',\n   description: 'Who is the coolest professor ever?',\n   points: 50,\n   answer: 'Dr. Janzen',\n};\n\nconst mockQList: Question[] = [mockQOne, mockQTwo];\n\nconst mockQuizBlock: QuizBlock = {\n   title: 'Final Assessment',\n   blockId: 'fakeblockidquiz',\n   pageIndex: 1,\n   blockIndex: 1,\n   requiredScore: 75,\n   points: 100,\n   questions: mockQList,\n};\n\nconst mockBlockList: TaskBlock[] = [mockTextBlock, mockImageBlock];\n\nconst mockBlockListTwo: TaskBlock[] = [mockVideoBlock, mockQuizBlock];\n\nconst mockPageOne: Page = {\n   blocks: mockBlockList,\n};\n\nconst mockPageTwo: Page = {\n   blocks: mockBlockListTwo,\n};\n\nconst mockPageList: Page[] = [mockPageOne, mockPageTwo];\n\nconst mockRequirement: RubricRequirement = {\n   id: 'fakerubricid',\n   description: 'This is a fake requirement!',\n   isComplete: false,\n};\n\nconst mockReqList: RubricRequirement[] = [mockRequirement];\n\nexport const mockTask: Task = {\n   id: 'fd87f78s',\n   name: 'Dinosaur Task',\n   instructions: 'Complete the intro and quiz to complete the task.',\n   points: 100,\n   missionId: 'fakemissionid',\n   missionIndex: 0,\n   course: 'Biology',\n   pages: mockPageList,\n   requirements: mockReqList,\n};\n\nconst ansone: Answer = {\n   questionId: 'fakemcqid',\n   pointsAwarded: 50,\n   answer: 'All of us!',\n};\n\nconst anstwo: Answer = {\n   questionId: 'fakefrqid',\n   pointsAwarded: 50,\n   answer: 'Dr. Janzen',\n};\n\nconst qandaone: QuestionAndAnswer = {\n   question: mockQOne,\n   answer: ansone,\n};\n\nconst qandatwo: QuestionAndAnswer = {\n   question: mockQTwo,\n   answer: anstwo,\n};\n\nconst mockQandAList: QuestionAndAnswer[] = [qandaone, qandatwo];\n\nexport const mockTaskSubmissionResult: TaskSubmissionResult = {\n   graded: true,\n   pointsAwarded: 100,\n   pointsPossible: 100,\n   questionAndAnswers: mockQandAList,\n   teacherComment: 'Great Job!!',\n};\n\nexport const quizblockSubmissionVar = makeVar<QuizBlockSubmission>(quizblockSubmission);\n\nexport const quizblockSubmissionsVar = makeVar<QuizBlockSubmission[]>(quizblockSubmissions);\n\nexport const mockTaskVar = makeVar<Task>(mockTask);\n","import { InMemoryCache } from '@apollo/client';\n\nimport * as mock from './mock';\n\nexport const cache: InMemoryCache = new InMemoryCache({\n   typePolicies: {\n      Query: {\n         fields: {\n            quizblockSubmission: {\n               read() {\n                  return mock.quizblockSubmissionVar();\n               },\n            },\n            quizblockSubmissions: {\n               read() {\n                  return mock.quizblockSubmissionsVar();\n               },\n            },\n            // task: {\n            //    read(_, { args }) {\n            //       return mock.mockTaskVar();\n            //    },\n            // },\n         },\n      },\n   },\n});\n","import { ApolloClient, ApolloLink, from, HttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { environment } from '../environment';\nimport { cache } from './cache';\n\ntype AuthorizedHeaders = Record<'authorization', string>;\n\nconst authLink: ApolloLink = setContext((_, { headers }) => {\n   // get the authentication token from local storage if it exists\n   const token = localStorage.getItem('jwt');\n   // return the headers to the context so httpLink can read them\n   const link: { headers: AuthorizedHeaders } = {\n      headers: {\n         ...headers,\n         authorization: token ? `${token}` : '',\n      } as AuthorizedHeaders,\n   };\n\n   return link;\n});\n\nconst httpLink: HttpLink = new HttpLink({ uri: environment.uri });\n\nconst apolloClient = new ApolloClient({\n   cache,\n   link: from([authLink, httpLink]),\n});\n\nexport default apolloClient;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport Amplify from 'aws-amplify';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport apolloClient from './clients/apollo-client';\n\nAmplify.configure({\n   Auth: {\n      identityPoolId: 'us-east-1:07057d76-612a-4045-8522-f38a759cf216',\n      region: 'us-east-1',\n      userPoolId: 'us-east-1_POfbbYTKF',\n      userPoolWebClientId: '24sdf1brebo58s89ja0b63c51d',\n      oauth: {\n         domain: 'flipted-ios-test.auth.us-east-1.amazoncognito.com',\n         scope: ['phone', 'email', 'profile', 'openid', 'aws.cognito.signin.user.admin'],\n         redirectSignIn: 'https://cpsecapstone.github.io/webrew/',\n         redirectSignOut: 'https://cpsecapstone.github.io/webrew/',\n         responseType: 'token',\n      },\n   },\n});\n\nReactDOM.render(\n   <React.StrictMode>\n      <link\n         rel=\"stylesheet\"\n         href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\n         integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\n         crossOrigin=\"anonymous\"\n      />\n      <ApolloProvider client={apolloClient}>\n         <Router>\n            <App />\n         </Router>\n      </ApolloProvider>\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}